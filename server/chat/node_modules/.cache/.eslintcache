[{"C:\\Users\\User\\Documents\\web developing\\exercises\\3\\final server\\Chat-Application\\chat\\src\\index.js":"1","C:\\Users\\User\\Documents\\web developing\\exercises\\3\\final server\\Chat-Application\\chat\\src\\App.js":"2","C:\\Users\\User\\Documents\\web developing\\exercises\\3\\final server\\Chat-Application\\chat\\src\\Chat.js":"3","C:\\Users\\User\\Documents\\web developing\\exercises\\3\\final server\\Chat-Application\\chat\\src\\sign-in\\Sign.js":"4","C:\\Users\\User\\Documents\\web developing\\exercises\\3\\final server\\Chat-Application\\chat\\src\\log-in\\Log-in.js":"5","C:\\Users\\User\\Documents\\web developing\\exercises\\3\\final server\\Chat-Application\\chat\\src\\ChatScreen\\ContactsBar.js":"6","C:\\Users\\User\\Documents\\web developing\\exercises\\3\\final server\\Chat-Application\\chat\\src\\ChatScreen\\LeftBar.js":"7","C:\\Users\\User\\Documents\\web developing\\exercises\\3\\final server\\Chat-Application\\chat\\src\\ChatScreen\\ChatBox.js":"8","C:\\Users\\User\\Documents\\web developing\\exercises\\3\\final server\\Chat-Application\\chat\\src\\log-in\\password\\PasswordLog.js":"9","C:\\Users\\User\\Documents\\web developing\\exercises\\3\\final server\\Chat-Application\\chat\\src\\sign-in\\image\\Image.js":"10","C:\\Users\\User\\Documents\\web developing\\exercises\\3\\final server\\Chat-Application\\chat\\src\\sign-in\\displayName\\Display.js":"11","C:\\Users\\User\\Documents\\web developing\\exercises\\3\\final server\\Chat-Application\\chat\\src\\log-in\\userName\\UsernameLog.js":"12","C:\\Users\\User\\Documents\\web developing\\exercises\\3\\final server\\Chat-Application\\chat\\src\\sign-in\\password\\Password.js":"13","C:\\Users\\User\\Documents\\web developing\\exercises\\3\\final server\\Chat-Application\\chat\\src\\sign-in\\userName\\Username.js":"14","C:\\Users\\User\\Documents\\web developing\\exercises\\3\\final server\\Chat-Application\\chat\\src\\ChatScreen\\ProfilePic.js":"15","C:\\Users\\User\\Documents\\web developing\\exercises\\3\\final server\\Chat-Application\\chat\\src\\ChatScreen\\LeftBarButtons.js":"16","C:\\Users\\User\\Documents\\web developing\\exercises\\3\\final server\\Chat-Application\\chat\\src\\ChatScreen\\Contact.js":"17","C:\\Users\\User\\Documents\\web developing\\exercises\\3\\final server\\Chat-Application\\chat\\src\\ChatScreen\\SendMessage.js":"18","C:\\Users\\User\\Documents\\web developing\\exercises\\3\\final server\\Chat-Application\\chat\\src\\ChatScreen\\ChatButtons.js":"19","C:\\Users\\User\\Documents\\web developing\\exercises\\3\\final server\\Chat-Application\\chat\\src\\ChatScreen\\Message.js":"20"},{"size":273,"mtime":1686233282716,"results":"21","hashOfConfig":"22"},{"size":1262,"mtime":1686296209020,"results":"23","hashOfConfig":"22"},{"size":4382,"mtime":1686429929526,"results":"24","hashOfConfig":"22"},{"size":2446,"mtime":1687674704027,"results":"25","hashOfConfig":"22"},{"size":2715,"mtime":1687691028649,"results":"26","hashOfConfig":"22"},{"size":6349,"mtime":1686429929528,"results":"27","hashOfConfig":"22"},{"size":475,"mtime":1686233282207,"results":"28","hashOfConfig":"22"},{"size":4365,"mtime":1686430063060,"results":"29","hashOfConfig":"22"},{"size":907,"mtime":1686233282720,"results":"30","hashOfConfig":"22"},{"size":1411,"mtime":1686233282726,"results":"31","hashOfConfig":"22"},{"size":801,"mtime":1686233282724,"results":"32","hashOfConfig":"22"},{"size":838,"mtime":1686233282721,"results":"33","hashOfConfig":"22"},{"size":2808,"mtime":1686233282730,"results":"34","hashOfConfig":"22"},{"size":1021,"mtime":1686233282731,"results":"35","hashOfConfig":"22"},{"size":257,"mtime":1686233282210,"results":"36","hashOfConfig":"22"},{"size":540,"mtime":1686233282208,"results":"37","hashOfConfig":"22"},{"size":1364,"mtime":1686233282203,"results":"38","hashOfConfig":"22"},{"size":1105,"mtime":1686233282212,"results":"39","hashOfConfig":"22"},{"size":1376,"mtime":1686233282202,"results":"40","hashOfConfig":"22"},{"size":679,"mtime":1686233282209,"results":"41","hashOfConfig":"22"},{"filePath":"42","messages":"43","suppressedMessages":"44","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1b2htt2",{"filePath":"45","messages":"46","suppressedMessages":"47","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"48"},{"filePath":"49","messages":"50","suppressedMessages":"51","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"52"},{"filePath":"53","messages":"54","suppressedMessages":"55","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"56"},{"filePath":"57","messages":"58","suppressedMessages":"59","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"60","messages":"61","suppressedMessages":"62","errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"63"},{"filePath":"64","messages":"65","suppressedMessages":"66","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"67","messages":"68","suppressedMessages":"69","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"70"},{"filePath":"71","messages":"72","suppressedMessages":"73","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"74"},{"filePath":"75","messages":"76","suppressedMessages":"77","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"78","messages":"79","suppressedMessages":"80","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"81","messages":"82","suppressedMessages":"83","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"84"},{"filePath":"85","messages":"86","suppressedMessages":"87","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"88"},{"filePath":"89","messages":"90","suppressedMessages":"91","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"92"},{"filePath":"93","messages":"94","suppressedMessages":"95","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"96"},{"filePath":"97","messages":"98","suppressedMessages":"99","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"100"},{"filePath":"101","messages":"102","suppressedMessages":"103","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"104","messages":"105","suppressedMessages":"106","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"107","messages":"108","suppressedMessages":"109","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"110","messages":"111","suppressedMessages":"112","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\User\\Documents\\web developing\\exercises\\3\\final server\\Chat-Application\\chat\\src\\index.js",[],[],"C:\\Users\\User\\Documents\\web developing\\exercises\\3\\final server\\Chat-Application\\chat\\src\\App.js",["113"],[],"import './App.css';\r\nimport { BrowserRouter as Router, Route, Routes, Navigate } from 'react-router-dom';\r\nimport { useState, useRef } from 'react';\r\nimport LogIn from './log-in/Log-in.js';\r\nimport Sign from './sign-in/Sign.js';\r\nimport Chat from './Chat.js';\r\n\r\n\r\n\r\nfunction App() {\r\n  const msgIdCounter = useRef(1);\r\n  const [users, setUsers] = useState([\r\n    { \"username\": \"a\", \"password\": \"123456\", \"displayName\": \"big A\", \"profilePic\": null, \"registered\": \"yes\", \"chats\": []}]);\r\n  const [user, setUser] = useState(null);\r\n  const [chats, setChats] = useState([]);\r\n\r\n  return (\r\n    <Router>\r\n      <Routes>\r\n      <Route path=\"/\" element={<Sign users={users} setUsers={setUsers}/>} />\r\n      <Route\r\n          path=\"/chat\"\r\n          element={user&&\r\n            users.find(user => user.registered === \"yes\") ? (\r\n              <Chat curUser={user}setChats={setChats} \r\n                    msgIdCounter={msgIdCounter}/>\r\n\r\n            ) : (\r\n              <Navigate to=\"/login\" />\r\n            )\r\n          }\r\n        />\r\n        <Route path=\"/login\" element={<LogIn users={users} setUsers={setUsers} setUser={setUser} />} />\r\n        <Route path=\"*\" element={<Navigate to=\"/\" />} />\r\n      </Routes>\r\n    </Router>\r\n  );\r\n}\r\n\r\nexport default App;\r\n\r\n\r\n","C:\\Users\\User\\Documents\\web developing\\exercises\\3\\final server\\Chat-Application\\chat\\src\\Chat.js",["114","115","116","117","118","119"],[],"import './Chat.css';\r\nimport LeftBar from './ChatScreen/LeftBar.js';\r\nimport ContactsBar from './ChatScreen/ContactsBar.js';\r\nimport ChatBox from './ChatScreen/ChatBox.js';\r\nimport React, { useState, useEffect } from \"react\";\r\nimport { Link, useNavigate } from 'react-router-dom';\r\n\r\n\r\nfunction Chat({ curUser, setChats, msgIdCounter }) {\r\n  const [curChat, setCurChat] = useState(null);\r\n  const [selectedContact, setSelectedContact] = useState(null);\r\n  const [fetchedChats, setFetchedChats] = useState([]);\r\n  const navigate = useNavigate();\r\n  const [socket, setSocket] = useState(null);\r\n  const [chatRemove, setChatRemove] = useState(true);\r\n\r\n  useEffect(() => {\r\n    const newSocket = new WebSocket('ws://localhost:5000'); \r\n    setSocket(newSocket);\r\n\r\n    if (newSocket) {\r\n      newSocket.addEventListener('message', (event) => {\r\n        const data = JSON.parse(event.data);\r\n        if (data.event === 'chatRemoved') {\r\n          const deletedChatId = data.data.deletedChat.id;\r\n          setFetchedChats((prevChats) => prevChats.filter((c) => c.id !== deletedChatId));\r\n          if(data.data.deletedChat.users.find((u)=> u.username === selectedContact.username) ){\r\n            setSelectedContact(null)\r\n            setCurChat(null)\r\n          }\r\n          \r\n        }\r\n      });\r\n\r\n      return () => {\r\n        newSocket.close();\r\n      };\r\n    }\r\n  }, [selectedContact,setSelectedContact,setCurChat]);\r\n\r\n\r\n  const handleContactSelect = (chat) => {\r\n    setCurChat(chat);\r\n    const contact = curUser.username === chat.users[0].username ?\r\n    chat.users[1] : chat.users[0];\r\n    setSelectedContact(contact);\r\n  };\r\n\r\n  const handleAddChat = (newChat) => {\r\n    setChats((prevChats) => [...prevChats, newChat]);\r\n  };\r\n\r\n  const updateChatMessages = (chatId, updatedMessages) => {\r\n    setChats((prevChats) =>\r\n    prevChats.map((chat) => {\r\n        if (chat.id === chatId) {\r\n          chat.messages = updatedMessages;\r\n        }\r\n        return chat;\r\n      })\r\n    );\r\n  };\r\n\r\n  function handleLogOut(event) {\r\n    event.preventDefault();\r\n    curUser.registered = \"no\"\r\n    navigate('/login');\r\n  }\r\n\r\n  async function handleDeleteChat(chat) {\r\n    const id = chat.id\r\n    const res = await fetch(`http://localhost:5000/api/Chats/${id}`, {\r\n      method: 'delete',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n        'Authorization': `Bearer ${curUser.token}`\r\n      },\r\n    })\r\n    if (res.status != 204){\r\n      const errorMessage = await res.text();\r\n      alert(res.status + \" \" + res.statusText + \"\\n\" + errorMessage);\r\n      return;\r\n    }else{\r\n      setFetchedChats(prevChats => prevChats.filter(c => c.id !== id));\r\n      setSelectedContact(null);\r\n      setCurChat(null)\r\n    }\r\n    \r\n  }\r\n\r\n  async function updateLastMessage(updatedChat) {\r\n    const updatedChats = fetchedChats.map((chat) => {\r\n      if (chat.id === updatedChat.id) {\r\n        return {\r\n          ...chat,\r\n          lastMessage: updatedChat.lastMessage,\r\n        };\r\n      }\r\n      return chat;\r\n    });\r\n    setFetchedChats(updatedChats);\r\n  }\r\n\r\n  async function getMessages(chat) {\r\n    const id = chat.id;\r\n    const res = await fetch(`http://localhost:5000/api/Chats/${id}/Messages`, {\r\n      method: 'get',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n        'Authorization': `Bearer ${curUser.token}`\r\n      },\r\n    });\r\n    if (res.status != 200){\r\n      const errorMessage = await res.text();\r\n      alert(res.status + \" \" + res.statusText + \"\\n\" + errorMessage);\r\n    } else {\r\n      const data = await res.json();\r\n      return(data);\r\n    }\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <div id=\"background\"></div>\r\n      <LeftBar user={curUser} handleLogOut={handleLogOut}/>\r\n      <ContactsBar user={curUser}\r\n                   onChatSelect={handleContactSelect} onAddChat={handleAddChat}\r\n                   fetchedChats={fetchedChats} setFetchedChats={setFetchedChats}\r\n                   getMessages={getMessages}/>\r\n      <ChatBox chat={curChat} user={curUser} selectedContact={selectedContact}\r\n               setSelectedContact={setSelectedContact} setChat={setCurChat} \r\n               updateChatMessages={updateChatMessages} msgIdCounter={msgIdCounter}\r\n               handleDeleteChat={handleDeleteChat} updateLastMessage={updateLastMessage}\r\n               getMessages={getMessages}/>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default Chat;","C:\\Users\\User\\Documents\\web developing\\exercises\\3\\final server\\Chat-Application\\chat\\src\\sign-in\\Sign.js",["120","121"],[],"import React, { useState } from 'react';\r\nimport Display from './displayName/Display.js';\r\nimport Password from './password/Password.js';\r\nimport Image from './image/Image.js';\r\nimport Username from './userName/Username.js';\r\nimport { Link, useNavigate } from 'react-router-dom';\r\n\r\nfunction Sign({ users, setUsers }) {\r\n  const navigate = useNavigate();\r\n  const [isNameReady, setIsNameReady] = useState(null);\r\n  const [isPasswordReady, setIsPasswordReady] = useState(null);\r\n\r\n  const [name, setName] = useState(null);\r\n  const [password, setPassword] = useState(null);\r\n  const [display, setDisplay] = useState(null);\r\n  const [picture, setPicture] = useState(null);\r\n\r\n  async function handleSubmit(event) {\r\n    if (isNameReady && isPasswordReady && display) {\r\n      try{\r\n        event.preventDefault();\r\n      const newUser = {\r\n        username: name,\r\n        password: password,\r\n        displayName: display,\r\n        profilePic: picture\r\n      };\r\n      const res = await fetch('http://localhost:5000/api/Users', {\r\nmethod: 'post', // send a post request\r\nheaders: {\r\n'Content-Type': 'application/json', // the data (username/password) is in the form of a JSON object\r\n},\r\n'body': JSON.stringify(newUser) // The actual data (username/password)\r\n});\r\nif (res.status != 200){\r\n  const errorMessage = await res.text();\r\n  alert(\"This usrname is already exists. please peek another one\");\r\n} else {\r\n  navigate('/login'); // Navigate to the LogIn component\r\n}\r\n\r\n      } catch(error){\r\n        console.error('An error occurred:', error);\r\n      } \r\n    }else{\r\n      alert(\"One or more of the lables are missing\");\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <div className=\"patterns sea\"></div>\r\n      <form onSubmit={handleSubmit} >\r\n        <div className=\"container-fluid\" id=\"sign-screen\">\r\n          <Username setIsReady={setIsNameReady} setVal={setName} />\r\n          <Password setIsReady={setIsPasswordReady} setVal={setPassword} />\r\n          <Display setVal={setDisplay} />\r\n          <Image setVal={setPicture} />\r\n          <div>\r\n            <button type=\"submit\" className=\"btn btn-primary screen-foot\" id=\"login\">\r\n              Register\r\n            </button>\r\n            <span className=\"screen-foot\" id=\"register\">\r\n              Already registered? <Link to=\"/login\">click here</Link> to log-in\r\n            </span>\r\n          </div>\r\n        </div>\r\n      </form>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Sign;\r\n\r\n \r\n","C:\\Users\\User\\Documents\\web developing\\exercises\\3\\final server\\Chat-Application\\chat\\src\\log-in\\Log-in.js",[],[],"C:\\Users\\User\\Documents\\web developing\\exercises\\3\\final server\\Chat-Application\\chat\\src\\ChatScreen\\ContactsBar.js",["122","123","124","125","126","127","128"],[],"import React, { useState, useRef, useEffect } from \"react\";\r\nimport Contact from \"./Contact.js\";\r\n\r\nfunction ContactsBar({ user, onChatSelect, onAddChat, fetchedChats, setFetchedChats, getMessages }) {\r\n  const [isPopupVisible, setPopupVisible] = useState(false);\r\n  const [newContactName, setNewContactName] = useState(\"\");\r\n  const overlayRef = useRef(null);\r\n  const socket = useRef(null);\r\n  const addChatTriggered = useRef(false);\r\n\r\n\r\n  useEffect(() => {\r\n    socket.current = new WebSocket(\"ws://localhost:5000\");\r\n\r\n    socket.current.addEventListener(\"open\", () => {\r\n      console.log(\"WebSocket connection established\");\r\n    });\r\n\r\n    socket.current.addEventListener(\"message\", (event) => {\r\n      const data = JSON.parse(event.data);\r\n      const chat = data.data.chat;\r\n      if (data.event === \"chatAdded\" && !addChatTriggered.current &&\r\n       chat.users.find((u) => u.username === user.username)) {\r\n        const existingChat = fetchedChats.find((c) => c.id === chat.id);\r\n        if (existingChat) {\r\n          return;\r\n        }\r\n        const otherUser = chat.users.find((u) => u.username !== user.username);\r\n        const newChat = {\r\n          id: chat.id,\r\n          user: {\r\n            username: otherUser.username,\r\n            displayName: otherUser.displayName,\r\n            profilePic: otherUser.profilePic\r\n          },\r\n          lastMessage: null\r\n        };\r\n\r\n        setFetchedChats((prevChats) => [...prevChats, newChat]);\r\n        onAddChat(newChat);\r\n      }else if( data.event === \"chatModified\" || data.event === \"chatRemoved\"){\r\n        getChats();\r\n      }\r\n    });\r\n\r\n    return () => {\r\n      socket.current.close();\r\n    };\r\n  }, []);\r\n\r\n\r\n  useEffect(() => {\r\n    getChats();\r\n  }, []);\r\n\r\n  async function getLastMessage(chat) {\r\n    const messages = await getMessages(chat);\r\n    if (messages && messages.length > 0) {\r\n      messages.sort((a, b) => b.id - a.id);\r\n      return messages[0];\r\n    }\r\n    return null;\r\n  }\r\n\r\n  async function handleAddChat() {\r\n  addChatTriggered.current = true;\r\n  const contact = { username: newContactName };\r\n    const res = await fetch('http://localhost:5000/api/Chats', {\r\n      method: 'post',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n        'Authorization': `Bearer ${user.token}`\r\n      },\r\n      'body': JSON.stringify(contact)\r\n    });\r\n    if (res.status != 200){\r\n      const errorMessage = await res.text();\r\n      alert(res.status + \" \" + res.statusText + \"\\n\" + errorMessage);\r\n    } else {\r\n      const data = await res.json();\r\n      const lastMessage = await getLastMessage(data);\r\n      const newChat = {\r\n        id: data.id,\r\n        user:\r\n        {\r\n          \"username\": data.user.username,\r\n          \"displayName\": data.user.displayName,\r\n          \"profilePic\": data.user.profilePic\r\n        },\r\n        lastMessage: lastMessage\r\n      }\r\n      setPopupVisible(false);\r\n      setFetchedChats((prevChats) => [...prevChats, newChat]);\r\n      onAddChat(newChat);\r\n    };\r\n    addChatTriggered.current = false;\r\n  }\r\n\r\n  async function handleChatClick(clickedChat) {\r\n    const id = clickedChat.id;\r\n    const res = await fetch(`http://localhost:5000/api/Chats/${id}`, {\r\n      method: 'get',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n        'Authorization': `Bearer ${user.token}`\r\n      },\r\n    });\r\n    if (res.status != 200){\r\n      const errorMessage = await res.text();\r\n      alert(res.status + \" \" + res.statusText + \"\\n\" + errorMessage);\r\n    } else {\r\n      const data = await res.json();\r\n      onChatSelect(data);\r\n    }\r\n  }\r\n\r\n  const handlePopupToggle = () => {\r\n    setPopupVisible(!isPopupVisible);\r\n  };\r\n\r\n  const handleOverlayClick = () => {\r\n    if (isPopupVisible) {\r\n      return;\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (isPopupVisible) {\r\n      overlayRef.current.addEventListener(\"click\", handleOverlayClick);\r\n    }\r\n    return () => {\r\n      if (overlayRef.current) {\r\n        overlayRef.current.removeEventListener(\"click\", handleOverlayClick);\r\n      }\r\n    };\r\n  }, [isPopupVisible]);\r\n\r\n  async function getChats() {\r\n    try {\r\n        const res = await fetch('http://localhost:5000/api/Chats', {\r\n        method: 'get',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n          'Authorization': `Bearer ${user.token}`\r\n        },\r\n      });\r\n      if (res.status != 200){\r\n        const errorMessage = await res.text();\r\n        alert(res.status + \" \" + res.statusText + \"\\n\" + errorMessage);\r\n      } else {\r\n        const data = await res.json();\r\n        const updatedChats = [];\r\n        for (const chat of data) {\r\n          const lastMessage = chat.lastMessage;\r\n\r\n          const updatedChat = {\r\n            ...chat,\r\n            lastMessage: lastMessage,\r\n          };\r\n          updatedChats.push(updatedChat);\r\n        }\r\n        setFetchedChats(updatedChats);\r\n        return data;\r\n      }\r\n\r\n    } catch (error) {\r\n      console.error('Error:', error);\r\n    }\r\n  }\r\n  \r\n\r\n  \r\n  return (\r\n    <div id=\"chats_bar\">\r\n      <div id=\"chat_bar_line1\">\r\n        <span id=\"chats_title\">Contacts</span>\r\n        <span id=\"more_icon\" onClick={handlePopupToggle}>\r\n          +\r\n        </span>\r\n      </div>\r\n      <div id=\"chats\">\r\n        {fetchedChats &&\r\n         fetchedChats.map((chat) => (\r\n            <Contact\r\n            key={chat.id}\r\n            chat={chat}\r\n            onClick={() => handleChatClick(chat)}\r\n\r\n            />\r\n        ))}\r\n        {/* Render the popup if exists */}\r\n        {isPopupVisible && (\r\n          <div>\r\n            <div className=\"overlay\" ref={overlayRef}></div>\r\n            <div id=\"popup\">\r\n              <div id=\"popup_content\">\r\n                <p>Add a new contact</p>\r\n                <span>Name</span>\r\n                <input\r\n                  type=\"text\"\r\n                  value={newContactName}\r\n                  onChange={(e) => setNewContactName(e.target.value)}\r\n                />\r\n                <button id=\"cancel_button\" onClick={() => setPopupVisible(false)}>\r\n                  Cancel\r\n                </button>\r\n                <button id=\"add_button\" onClick={handleAddChat}>\r\n                  Add\r\n                </button>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default ContactsBar;\r\n","C:\\Users\\User\\Documents\\web developing\\exercises\\3\\final server\\Chat-Application\\chat\\src\\ChatScreen\\LeftBar.js",[],[],"C:\\Users\\User\\Documents\\web developing\\exercises\\3\\final server\\Chat-Application\\chat\\src\\ChatScreen\\ChatBox.js",["129","130","131"],[],"import React, { useState, useEffect, useRef } from \"react\";\r\nimport ProfilePic from \"./ProfilePic.js\";\r\nimport ChatButtons from \"./ChatButtons.js\";\r\nimport Message from \"./Message.js\";\r\nimport SendMessage from \"./SendMessage.js\";\r\n\r\nfunction ChatBox({ chat, user, selectedContact,setSelectedContact, setChat, updateChatMessages, handleDeleteChat, updateLastMessage, getMessages}) {\r\n  const [chatMessages, setChatMessages] = useState([]);\r\n  const messagesContainerRef = useRef(null);\r\n  const socket = useRef(null);\r\n  let messages = chat ? chat.messages || [] : [];\r\n\r\n  useEffect(() => {\r\n    socket.current = new WebSocket(\"ws://localhost:5000\");\r\n\r\n    socket.current.addEventListener(\"open\", () => {\r\n      console.log(\"WebSocket connection established\");\r\n    });\r\n\r\n    socket.current.addEventListener(\"message\", async (event) => {\r\n      const data = JSON.parse(event.data);\r\n      console.log(selectedContact);\r\n      if (data.event === \"chatModified\" && chat && data.data.updatedChat.id === chat.id) {\r\n        const updatedChatId = data.data.updatedChat.id;\r\n        const updatedChatMessages = data.data.updatedChat.messages;\r\n        setChatMessages(updatedChatMessages);\r\n        updateChatMessages(updatedChatId, updatedChatMessages);\r\n        messages = updatedChatMessages;\r\n      } \r\n      else if(data.event === \"chatRemoved\"&&\r\n      data.data.deletedChat.users.find((u) => u.username === selectedContact.username)) {\r\n          setSelectedContact(null)\r\n          messages = []\r\n        }\r\n    });\r\n\r\n    return () => {\r\n      socket.current.close();\r\n    };\r\n  }, [selectedContact,setSelectedContact,messages]);\r\n  \r\n  useEffect(() => {\r\n    if (chat) {\r\n      getMessages(chat)\r\n        .then((data) => {\r\n          setChatMessages(data);\r\n        })\r\n    }\r\n  }, [chat]);\r\n\r\n  useEffect(() => {\r\n    setChatMessages(chatMessages);\r\n  }, [chatMessages]);\r\n  \r\n\r\n  \r\n\r\n\r\n  useEffect(() => {\r\n    const container = messagesContainerRef.current;\r\n    if (container && chat) {\r\n      container.scrollTop = container.scrollHeight;\r\n    }\r\n  }, [chat]);\r\n\r\n  async function handleSendMessage(messageText) {\r\n    if (chat) {\r\n      const msg = { msg: messageText };\r\n      const id = chat.id;\r\n      const res = await fetch(`http://localhost:5000/api/Chats/${id}/Messages`, {\r\n        method: \"post\",\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n          Authorization: `Bearer ${user.token}`,\r\n        },\r\n        body: JSON.stringify(msg),\r\n      });\r\n      if (res.status != 200) {\r\n        const errorMessage = await res.text();\r\n        alert(res.status + \" \" + res.statusText + \"\\n\" + errorMessage);\r\n      } else {\r\n        const data = await res.json();\r\n        const newMessage = {\r\n          id: data.id,\r\n          created: data.created,\r\n          sender: {\r\n            username: data.sender.username,\r\n            displayName: data.sender.displayName,\r\n            profilePic: data.sender.profilePic,\r\n          },\r\n          content: data.content,\r\n        };\r\n        const updatedMessages = [...chatMessages, newMessage];\r\n        const updatedChat = {\r\n          ...chat,\r\n          messages: updatedMessages,\r\n          lastMessage: newMessage,\r\n        };\r\n\r\n        setChatMessages(updatedMessages);\r\n        updateChatMessages(chat.id, updatedMessages);\r\n        setChat(updatedChat);\r\n        updateLastMessage(updatedChat);\r\n      }\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div id=\"chat_window\">\r\n      {selectedContact && (\r\n        <>\r\n\r\n          <ProfilePic pic={selectedContact.profilePic}/>\r\n          <span className=\"username\">{selectedContact.displayName}</span>\r\n        </>\r\n      )}\r\n      <ChatButtons chat={chat} handleDeleteChat={handleDeleteChat}/>\r\n      <div id=\"messages\" ref={messagesContainerRef}>\r\n        {chatMessages.slice().reverse().map((message, index) => {\r\n          const incoming = message.sender.username === user.username ? 0 : 1;\r\n          return (\r\n            <Message\r\n              key={index}\r\n              text={message.content}\r\n              dateAndTime={message.created}\r\n              incoming={incoming}\r\n            />\r\n          );\r\n        })}\r\n      </div>\r\n      <SendMessage\r\n        onSendMessage={handleSendMessage}\r\n        selectedContact={selectedContact ? selectedContact.username : null}\r\n      />\r\n    </div>\r\n  );\r\n}\r\n\r\n\r\nexport default ChatBox;","C:\\Users\\User\\Documents\\web developing\\exercises\\3\\final server\\Chat-Application\\chat\\src\\log-in\\password\\PasswordLog.js",["132","133"],[],"import { useRef, useState, useEffect } from \"react\";\r\n\r\n\r\nfunction PasswordLog({ setVal}) {\r\n  const passRef = useRef(null);\r\n  function setPass(){\r\n    setVal(passRef.current.value);\r\n  }\r\n\r\n  //check if this name exists or match to this password\r\n  \r\n\r\n  return (\r\n    <>\r\n      <div className=\"container  lable\">\r\n        <div className=\"input-group mb-3\">\r\n          <div className=\"input-group-prepend\">\r\n            <span className=\"input-group-text\" id=\"basic-addon1\">\r\n              Password\r\n            </span>\r\n          </div>\r\n          <input\r\n            ref={passRef}\r\n            onKeyUp={() => {\r\n              setPass();\r\n            }}\r\n            type=\"password\"\r\n            className=\"form-control\"\r\n            aria-label=\"password\"\r\n            aria-describedby=\"basic-addon1\"\r\n          ></input>\r\n        </div>\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default PasswordLog;\r\n\r\n ","C:\\Users\\User\\Documents\\web developing\\exercises\\3\\final server\\Chat-Application\\chat\\src\\sign-in\\image\\Image.js",[],[],"C:\\Users\\User\\Documents\\web developing\\exercises\\3\\final server\\Chat-Application\\chat\\src\\sign-in\\displayName\\Display.js",[],[],"C:\\Users\\User\\Documents\\web developing\\exercises\\3\\final server\\Chat-Application\\chat\\src\\log-in\\userName\\UsernameLog.js",["134","135"],[],"import { useEffect, useRef, useState } from \"react\";\r\n\r\n//the final bottom\r\nfunction UsernameLog({setVal}) {\r\n\r\n  const nameRef = useRef(null);\r\n  function setName(){\r\n    setVal(nameRef.current.value);\r\n  }\r\n  return (\r\n    <>\r\n      <div className=\"lable\">\r\n        <div className=\"input-group mb-3\">\r\n          <div className=\"input-group-prepend\">\r\n            <span className=\"input-group-text\" id=\"basic-addon1\">\r\n              Username\r\n            </span>\r\n          </div>\r\n          <input\r\n            ref={nameRef}\r\n            onKeyUp={() => {\r\n              setName();\r\n            }}\r\n            type=\"text\"\r\n            className=\"form-control\"\r\n            aria-label=\"Username\"\r\n            aria-describedby=\"basic-addon1\"\r\n          />\r\n        </div>\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default UsernameLog;\r\n\r\n","C:\\Users\\User\\Documents\\web developing\\exercises\\3\\final server\\Chat-Application\\chat\\src\\sign-in\\password\\Password.js",["136","137"],[],"import { useRef, useState, useEffect } from \"react\";\r\n\r\nfunction Password({ setIsReady, setVal }) {\r\n  const pass1Ref = useRef(null);\r\n  const pass2Ref = useRef(null);\r\n  const [isMatch, setIsMatch] = useState(true);\r\n  const [isCorrect, setIsCorrect] = useState(true);\r\n\r\n  //check that the password is longer than 5 letters\r\n  const checkCorrect = () => {\r\n    const pass1 = pass1Ref.current.value;\r\n    const isCorrect = pass1.length > 6;\r\n    const hasUppercase = /[A-Z]/.test(pass1);\r\n    const hasLowercase = /[a-z]/.test(pass1);\r\n    setIsCorrect(isCorrect && hasUppercase && hasLowercase);\r\n  };\r\n\r\n  //check that the password validation is equal to the original password\r\n  const checkValid = () => {\r\n    const pass1 = pass1Ref.current.value;\r\n    const pass2 = pass2Ref.current.value;\r\n    const result = pass1 === pass2;\r\n    setIsMatch(result);\r\n  };\r\n\r\n  //check if ready to submit\r\n  useEffect(() => {\r\n    let pass1 = pass1Ref.current.value;\r\n    let pass2 = pass2Ref.current.value;\r\n    if (isMatch && isCorrect && pass1 != '' && pass2 != '') {\r\n      setIsReady(true);\r\n      setVal(pass1);\r\n    } else {\r\n      setIsReady(false);\r\n    }\r\n  }, [isMatch, isCorrect, setIsReady, setVal]);\r\n\r\n  return (\r\n    <>\r\n      {!isCorrect && (\r\n        <div className=\"lable alert alert-danger\">\r\n          The password is shorter than 6 letters and has no upper case or lower case in it\r\n        </div>\r\n      )}\r\n      <div className=\"container  lable\">\r\n        <div className=\"input-group mb-3\">\r\n          <div className=\"input-group-prepend\">\r\n            <span className=\"input-group-text\" id=\"basic-addon1\">\r\n              Password\r\n            </span>\r\n          </div>\r\n          <input\r\n            ref={pass1Ref}\r\n            onKeyUp={() => {\r\n              checkCorrect();\r\n            }}\r\n            type=\"password\"\r\n            className=\"form-control\"\r\n            aria-label=\"password\"\r\n            aria-describedby=\"basic-addon1\"\r\n          ></input>\r\n        </div>\r\n      </div>\r\n      {isCorrect && !isMatch && (\r\n        <div className=\"lable alert alert-danger\">\r\n          The verification has no match\r\n        </div>\r\n      )}\r\n      <div className=\"container  lable\">\r\n        <div className=\"input-group mb-3\">\r\n          <div className=\"input-group-prepend\">\r\n            <span className=\"input-group-text\" id=\"basic-addon1\">\r\n              Password Verification\r\n            </span>\r\n          </div>\r\n          <input\r\n            ref={pass2Ref}\r\n            onKeyUp={() => {\r\n              checkValid();\r\n            }}\r\n            type=\"password\"\r\n            className=\"form-control\"\r\n            aria-label=\"password\"\r\n            aria-describedby=\"basic-addon1\"\r\n          ></input>\r\n        </div>\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default Password;\r\n\r\n ","C:\\Users\\User\\Documents\\web developing\\exercises\\3\\final server\\Chat-Application\\chat\\src\\sign-in\\userName\\Username.js",["138","139","140"],[],"import { useEffect, useRef, useState } from \"react\";\r\n\r\n//the final bottom\r\nfunction Username({setIsReady,setVal}) {\r\n  //get the input\r\n  const nameRef = useRef(null);\r\n\r\n  //check if ready to submit\r\n  const setUser = () => {\r\n    const name = nameRef.current.value\r\n    if( name != ''){\r\n      setIsReady(true);\r\n      setVal(name);\r\n    }else{\r\n      setIsReady(false);\r\n    }\r\n\r\n  }\r\n  \r\n\r\n\r\n  return (\r\n    <>\r\n      <div className=\"lable\">\r\n        <div className=\"input-group mb-3\">\r\n          <div className=\"input-group-prepend\">\r\n            <span className=\"input-group-text\" id=\"basic-addon1\">\r\n              Username\r\n            </span>\r\n          </div>\r\n          <input\r\n            ref={nameRef}\r\n            onKeyUp={() => {\r\n              setUser();\r\n            }}\r\n            type=\"text\"\r\n            className=\"form-control\"\r\n            aria-label=\"Username\"\r\n            aria-describedby=\"basic-addon1\"\r\n          />\r\n        </div>\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default Username;\r\n","C:\\Users\\User\\Documents\\web developing\\exercises\\3\\final server\\Chat-Application\\chat\\src\\ChatScreen\\ProfilePic.js",["141"],[],"function ProfilePic({ pic }) {\r\n    const noPic = \"profile_pics/NO_PIC.png\";\r\n\r\n    return (\r\n      <div className=\"pic_and_status\">\r\n        <img className=\"profile_pic\" src={pic || noPic} />\r\n      </div>\r\n    );\r\n  }\r\n  \r\n  export default ProfilePic;\r\n  ","C:\\Users\\User\\Documents\\web developing\\exercises\\3\\final server\\Chat-Application\\chat\\src\\ChatScreen\\LeftBarButtons.js",["142","143","144","145","146"],[],"\r\nfunction LeftBarButtons ({ handleLogOut }) {\r\n\r\n    return (\r\n        <div id=\"icon_menu\">\r\n            <img id=\"chat_icon\" className=\"icon\" src=\"icons/chat_icon.png\"></img>\r\n            <img className=\"icon\" src=\"icons/phone_icon.png\"></img>\r\n            <img className=\"icon\" src=\"icons/bell_icon.png\"></img>\r\n            <img className=\"icon\" src=\"icons/settings_icon.png\"></img>\r\n            <img id=\"logout_icon\" src=\"icons/exit_icon.png\" onClick = {handleLogOut}></img>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default LeftBarButtons;\r\n","C:\\Users\\User\\Documents\\web developing\\exercises\\3\\final server\\Chat-Application\\chat\\src\\ChatScreen\\Contact.js",[],[],"C:\\Users\\User\\Documents\\web developing\\exercises\\3\\final server\\Chat-Application\\chat\\src\\ChatScreen\\SendMessage.js",[],[],"C:\\Users\\User\\Documents\\web developing\\exercises\\3\\final server\\Chat-Application\\chat\\src\\ChatScreen\\ChatButtons.js",[],[],"C:\\Users\\User\\Documents\\web developing\\exercises\\3\\final server\\Chat-Application\\chat\\src\\ChatScreen\\Message.js",[],[],{"ruleId":"147","severity":1,"message":"148","line":15,"column":10,"nodeType":"149","messageId":"150","endLine":15,"endColumn":15},{"ruleId":"147","severity":1,"message":"151","line":6,"column":10,"nodeType":"149","messageId":"150","endLine":6,"endColumn":14},{"ruleId":"147","severity":1,"message":"152","line":14,"column":10,"nodeType":"149","messageId":"150","endLine":14,"endColumn":16},{"ruleId":"147","severity":1,"message":"153","line":15,"column":10,"nodeType":"149","messageId":"150","endLine":15,"endColumn":20},{"ruleId":"147","severity":1,"message":"154","line":15,"column":22,"nodeType":"149","messageId":"150","endLine":15,"endColumn":35},{"ruleId":"155","severity":1,"message":"156","line":79,"column":20,"nodeType":"157","messageId":"158","endLine":79,"endColumn":22},{"ruleId":"155","severity":1,"message":"156","line":113,"column":20,"nodeType":"157","messageId":"158","endLine":113,"endColumn":22},{"ruleId":"155","severity":1,"message":"156","line":35,"column":16,"nodeType":"157","messageId":"158","endLine":35,"endColumn":18},{"ruleId":"147","severity":1,"message":"159","line":36,"column":9,"nodeType":"149","messageId":"150","endLine":36,"endColumn":21},{"ruleId":"160","severity":1,"message":"161","line":49,"column":6,"nodeType":"162","endLine":49,"endColumn":8,"suggestions":"163"},{"ruleId":"160","severity":1,"message":"164","line":54,"column":6,"nodeType":"162","endLine":54,"endColumn":8,"suggestions":"165"},{"ruleId":"155","severity":1,"message":"156","line":76,"column":20,"nodeType":"157","messageId":"158","endLine":76,"endColumn":22},{"ruleId":"155","severity":1,"message":"156","line":108,"column":20,"nodeType":"157","messageId":"158","endLine":108,"endColumn":22},{"ruleId":"160","severity":1,"message":"166","line":133,"column":20,"nodeType":"149","endLine":133,"endColumn":27},{"ruleId":"160","severity":1,"message":"167","line":136,"column":6,"nodeType":"162","endLine":136,"endColumn":22,"suggestions":"168"},{"ruleId":"155","severity":1,"message":"156","line":147,"column":22,"nodeType":"157","messageId":"158","endLine":147,"endColumn":24},{"ruleId":"160","severity":1,"message":"169","line":28,"column":20,"nodeType":"149","endLine":28,"endColumn":39},{"ruleId":"160","severity":1,"message":"170","line":49,"column":6,"nodeType":"162","endLine":49,"endColumn":12,"suggestions":"171"},{"ruleId":"155","severity":1,"message":"156","line":78,"column":22,"nodeType":"157","messageId":"158","endLine":78,"endColumn":24},{"ruleId":"147","severity":1,"message":"172","line":1,"column":18,"nodeType":"149","messageId":"150","endLine":1,"endColumn":26},{"ruleId":"147","severity":1,"message":"173","line":1,"column":28,"nodeType":"149","messageId":"150","endLine":1,"endColumn":37},{"ruleId":"147","severity":1,"message":"173","line":1,"column":10,"nodeType":"149","messageId":"150","endLine":1,"endColumn":19},{"ruleId":"147","severity":1,"message":"172","line":1,"column":29,"nodeType":"149","messageId":"150","endLine":1,"endColumn":37},{"ruleId":"155","severity":1,"message":"156","line":30,"column":39,"nodeType":"157","messageId":"158","endLine":30,"endColumn":41},{"ruleId":"155","severity":1,"message":"156","line":30,"column":54,"nodeType":"157","messageId":"158","endLine":30,"endColumn":56},{"ruleId":"147","severity":1,"message":"173","line":1,"column":10,"nodeType":"149","messageId":"150","endLine":1,"endColumn":19},{"ruleId":"147","severity":1,"message":"172","line":1,"column":29,"nodeType":"149","messageId":"150","endLine":1,"endColumn":37},{"ruleId":"155","severity":1,"message":"156","line":11,"column":14,"nodeType":"157","messageId":"158","endLine":11,"endColumn":16},{"ruleId":"174","severity":1,"message":"175","line":6,"column":9,"nodeType":"176","endLine":6,"endColumn":59},{"ruleId":"174","severity":1,"message":"175","line":6,"column":13,"nodeType":"176","endLine":6,"endColumn":76},{"ruleId":"174","severity":1,"message":"175","line":7,"column":13,"nodeType":"176","endLine":7,"endColumn":62},{"ruleId":"174","severity":1,"message":"175","line":8,"column":13,"nodeType":"176","endLine":8,"endColumn":61},{"ruleId":"174","severity":1,"message":"175","line":9,"column":13,"nodeType":"176","endLine":9,"endColumn":65},{"ruleId":"174","severity":1,"message":"175","line":10,"column":13,"nodeType":"176","endLine":10,"endColumn":86},"no-unused-vars","'chats' is assigned a value but never used.","Identifier","unusedVar","'Link' is defined but never used.","'socket' is assigned a value but never used.","'chatRemove' is assigned a value but never used.","'setChatRemove' is assigned a value but never used.","eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","'errorMessage' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'fetchedChats', 'getChats', 'onAddChat', 'setFetchedChats', and 'user.username'. Either include them or remove the dependency array. If 'setFetchedChats' changes too often, find the parent component that defines it and wrap that definition in useCallback.","ArrayExpression",["177"],"React Hook useEffect has a missing dependency: 'getChats'. Either include it or remove the dependency array.",["178"],"The ref value 'overlayRef.current' will likely have changed by the time this effect cleanup function runs. If this ref points to a node rendered by React, copy 'overlayRef.current' to a variable inside the effect, and use that variable in the cleanup function.","React Hook useEffect has a missing dependency: 'handleOverlayClick'. Either include it or remove the dependency array.",["179"],"Assignments to the 'messages' variable from inside React Hook useEffect will be lost after each render. To preserve the value over time, store it in a useRef Hook and keep the mutable value in the '.current' property. Otherwise, you can move this variable directly inside useEffect.","React Hook useEffect has a missing dependency: 'getMessages'. Either include it or remove the dependency array. If 'getMessages' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["180"],"'useState' is defined but never used.","'useEffect' is defined but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement",{"desc":"181","fix":"182"},{"desc":"183","fix":"184"},{"desc":"185","fix":"186"},{"desc":"187","fix":"188"},"Update the dependencies array to be: [fetchedChats, getChats, onAddChat, setFetchedChats, user.username]",{"range":"189","text":"190"},"Update the dependencies array to be: [getChats]",{"range":"191","text":"192"},"Update the dependencies array to be: [handleOverlayClick, isPopupVisible]",{"range":"193","text":"194"},"Update the dependencies array to be: [chat, getMessages]",{"range":"195","text":"196"},[1679,1681],"[fetchedChats, getChats, onAddChat, setFetchedChats, user.username]",[1732,1734],"[getChats]",[4056,4072],"[handleOverlayClick, isPopupVisible]",[1788,1794],"[chat, getMessages]"]