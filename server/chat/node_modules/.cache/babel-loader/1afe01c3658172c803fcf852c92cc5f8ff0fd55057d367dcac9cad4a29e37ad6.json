{"ast":null,"code":"var _jsxFileName = \"/home/uri/\\u05E9\\u05D5\\u05DC\\u05D7\\u05DF \\u05D4\\u05E2\\u05D1\\u05D5\\u05D3\\u05D4/Ex2/Chat-Application/chat/src/ChatScreen/ChatBox.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from \"react\";\nimport ProfilePic from \"./ProfilePic.js\";\nimport ChatButtons from \"./ChatButtons.js\";\nimport Message from \"./Message.js\";\nimport SendMessage from \"./SendMessage.js\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction ChatBox(_ref) {\n  _s();\n  let {\n    chat,\n    user,\n    selectedContact,\n    setChat,\n    updateChatMessages,\n    handleDeleteChat,\n    updateLastMessage\n  } = _ref;\n  const [chatMessages, setChatMessages] = useState({});\n  const messagesContainerRef = useRef(null);\n  const messages = chat ? chat.messages || [] : [];\n  useEffect(() => {\n    if (chat) {\n      setChatMessages(prevMessages => ({\n        ...prevMessages,\n        [chat]: {\n          messages: chatMessages || []\n        }\n      }));\n    }\n  }, [chat]);\n  useEffect(() => {\n    const container = messagesContainerRef.current;\n    if (container && chat) {\n      container.scrollTop = container.scrollHeight;\n    }\n  }, [chat]);\n  async function handleSendMessage(messageText) {\n    if (chat) {\n      const msg = {\n        msg: messageText\n      };\n      const id = chat.id;\n      const res = await fetch(`http://localhost:5000/api/Chats/${id}/Messages`, {\n        method: 'post',\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': `Bearer ${user.token}`\n        },\n        'body': JSON.stringify(msg)\n      });\n      if (res.status != 200) {\n        const errorMessage = await res.text();\n        alert(res.status + \" \" + res.statusText + \"\\n\" + errorMessage);\n      } else {\n        const data = await res.json();\n        const dateTime = new Date(data.created);\n        const date = dateTime.toLocaleDateString();\n        const time = dateTime.toLocaleTimeString();\n        const dateTimeFormatted = `${date} ${time}`;\n        const newMessage = {\n          id: data.id,\n          created: data.created,\n          sender: {\n            \"username\": data.sender.username,\n            \"displayName\": data.sender.displayName,\n            \"profilePic\": data.sender.profilePic\n          },\n          content: data.content\n        };\n        const updatedMessages = [...(chat.messages || []), newMessage];\n        const updatedChat = {\n          ...chat,\n          messages: updatedMessages,\n          lastMessage: newMessage\n        };\n        setChatMessages(prevMessages => ({\n          ...prevMessages,\n          [chat]: {\n            messages: updatedMessages,\n            lastMessage: newMessage\n          }\n        }));\n        updateChatMessages(chat.id, updatedMessages);\n        setChat(updatedChat);\n        updateLastMessage(updatedChat);\n      }\n    }\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    id: \"chat_window\",\n    children: [selectedContact && /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(ProfilePic, {\n        pic: selectedContact.profilePic\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"username\",\n        children: selectedContact.displayName\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true), /*#__PURE__*/_jsxDEV(ChatButtons, {\n      chat: chat,\n      handleDeleteChat: handleDeleteChat\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"messages\",\n      ref: messagesContainerRef,\n      children: messages.slice().reverse().map((message, index) => {\n        const incoming = message.sender.username === user.username ? 0 : 1;\n        return /*#__PURE__*/_jsxDEV(Message, {\n          text: message.content,\n          time: dateTimeFormatted,\n          incoming: incoming\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 107,\n          columnNumber: 13\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(SendMessage, {\n      onSendMessage: handleSendMessage,\n      selectedContact: selectedContact ? selectedContact.username : null\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 94,\n    columnNumber: 5\n  }, this);\n}\n_s(ChatBox, \"WUOmNIQxQ2RJUU0njkkGHUp/Txk=\");\n_c = ChatBox;\nexport default ChatBox;\nvar _c;\n$RefreshReg$(_c, \"ChatBox\");","map":{"version":3,"names":["React","useState","useEffect","useRef","ProfilePic","ChatButtons","Message","SendMessage","jsxDEV","_jsxDEV","Fragment","_Fragment","ChatBox","_ref","_s","chat","user","selectedContact","setChat","updateChatMessages","handleDeleteChat","updateLastMessage","chatMessages","setChatMessages","messagesContainerRef","messages","prevMessages","container","current","scrollTop","scrollHeight","handleSendMessage","messageText","msg","id","res","fetch","method","headers","token","JSON","stringify","status","errorMessage","text","alert","statusText","data","json","dateTime","Date","created","date","toLocaleDateString","time","toLocaleTimeString","dateTimeFormatted","newMessage","sender","username","displayName","profilePic","content","updatedMessages","updatedChat","lastMessage","children","pic","fileName","_jsxFileName","lineNumber","columnNumber","className","ref","slice","reverse","map","message","index","incoming","onSendMessage","_c","$RefreshReg$"],"sources":["/home/uri/שולחן העבודה/Ex2/Chat-Application/chat/src/ChatScreen/ChatBox.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from \"react\";\nimport ProfilePic from \"./ProfilePic.js\";\nimport ChatButtons from \"./ChatButtons.js\";\nimport Message from \"./Message.js\";\nimport SendMessage from \"./SendMessage.js\";\n\n\nfunction ChatBox({chat, user, selectedContact, setChat, updateChatMessages, handleDeleteChat, updateLastMessage}) {\n  const [chatMessages, setChatMessages] = useState({});\n  const messagesContainerRef = useRef(null);\n  const messages = chat ? chat.messages || [] : [];\n\n  useEffect(() => {\n    if (chat) {\n      setChatMessages((prevMessages) => ({\n        ...prevMessages,\n        [chat]: {\n          messages: chatMessages || [],\n        },\n      }));\n    }\n  }, [chat]);\n  \n\n\n  useEffect(() => {\n    const container = messagesContainerRef.current;\n    if (container && chat) {\n      container.scrollTop = container.scrollHeight;\n    }\n  }, [chat]);\n\n  async function handleSendMessage (messageText) {\n    if (chat) {\n      const msg = { msg: messageText };\n      const id = chat.id\n      const res = await fetch(`http://localhost:5000/api/Chats/${id}/Messages`, {\n        method: 'post',\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': `Bearer ${user.token}`\n        },\n        'body': JSON.stringify(msg)\n      });\n      if (res.status != 200){\n        const errorMessage = await res.text();\n        alert(res.status + \" \" + res.statusText + \"\\n\" + errorMessage);\n      } else {\n        const data = await res.json();\n        const dateTime = new Date(data.created);\n        const date = dateTime.toLocaleDateString();\n        const time = dateTime.toLocaleTimeString();\n        const dateTimeFormatted = `${date} ${time}`;\n        const newMessage = {\n          id: data.id,\n          created: data.created,\n          sender:\n          {\n            \"username\": data.sender.username,\n            \"displayName\": data.sender.displayName,\n            \"profilePic\": data.sender.profilePic\n          },\n          content: data.content\n        }\n\n        const updatedMessages = [\n          ...(chat.messages || []),\n          newMessage,\n        ];\n          \n        const updatedChat = {\n          ...chat,\n          messages: updatedMessages,\n          lastMessage: newMessage\n        };\n    \n        setChatMessages((prevMessages) => ({\n          ...prevMessages,\n          [chat]: {\n            messages: updatedMessages,\n            lastMessage: newMessage\n          },\n        }));\n        updateChatMessages(chat.id, updatedMessages);\n        setChat(updatedChat);\n        updateLastMessage(updatedChat);\n      }\n    }    \n  }\n\n  \n\n  return (\n    <div id=\"chat_window\">\n      {selectedContact && (\n        <>\n\n          <ProfilePic pic={selectedContact.profilePic}/>\n          <span className=\"username\">{selectedContact.displayName}</span>\n        </>\n      )}\n      <ChatButtons chat={chat} handleDeleteChat={handleDeleteChat}/>\n      <div id=\"messages\" ref={messagesContainerRef}>\n      {messages.slice().reverse().map((message, index) => {\n        const incoming = message.sender.username === user.username ? 0 : 1;\n        return (\n            <Message\n            key={index}\n            text={message.content}\n            time={dateTimeFormatted}\n            incoming={incoming}\n            />\n        );\n        })}\n      </div>\n      <SendMessage\n        onSendMessage={handleSendMessage}\n        selectedContact={selectedContact ? selectedContact.username : null}\n      />\n    </div>\n  );\n}\n\nexport default ChatBox;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}