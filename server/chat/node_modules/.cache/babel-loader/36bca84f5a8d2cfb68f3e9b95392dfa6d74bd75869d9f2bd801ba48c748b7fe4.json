{"ast":null,"code":"var _jsxFileName = \"/home/uri/\\u05E9\\u05D5\\u05DC\\u05D7\\u05DF \\u05D4\\u05E2\\u05D1\\u05D5\\u05D3\\u05D4/Ex2/Chat-Application/chat/src/ChatScreen/ChatBox.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from \"react\";\nimport ProfilePic from \"./ProfilePic.js\";\nimport ChatButtons from \"./ChatButtons.js\";\nimport Message from \"./Message.js\";\nimport SendMessage from \"./SendMessage.js\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction ChatBox(_ref) {\n  _s();\n  let {\n    chat,\n    user,\n    selectedContact,\n    setChat,\n    updateChatMessages,\n    msgIdCounter,\n    handleDeleteChat\n  } = _ref;\n  const [chatMessages, setChatMessages] = useState({});\n  const messagesContainerRef = useRef(null);\n  const messages = chat ? chat.messages || [] : [];\n  useEffect(() => {\n    if (chat) {\n      setChatMessages(prevMessages => ({\n        ...prevMessages,\n        [chat]: {\n          messages: chatMessages || []\n        }\n      }));\n    }\n  }, [chat]);\n  useEffect(() => {\n    const container = messagesContainerRef.current;\n    if (container && chat) {\n      container.scrollTop = container.scrollHeight;\n    }\n  }, [chat]);\n  const formatDateTime = dateTime => {\n    const options = {\n      year: \"numeric\",\n      month: \"numeric\",\n      day: \"numeric\",\n      hour: \"numeric\",\n      minute: \"numeric\",\n      second: \"numeric\",\n      hour12: false\n    };\n    return dateTime.toLocaleString(\"en-US\", options);\n  };\n  async function handleSendMessage(messageText) {\n    const id = chat.id;\n    const res = await fetch(`http://localhost:5000/api/Chats/${id}/Messeges`, {\n      method: 'post',\n      headers: {\n        'Content-Type': 'application/json',\n        'Authorization': `Bearer ${user.token}`\n      }\n    });\n    if (res.status != 200) {\n      const errorMessage = await res.text();\n      alert(errorMessage);\n    }\n    const data = await res.json();\n    onChatSelect(data);\n    if (chat) {\n      const newMessage = {\n        id: msgIdCounter.current++,\n        content: messageText,\n        time: formatDateTime(new Date()),\n        sender: user\n      };\n      const updatedMessages = [...(chat.messages || []), newMessage];\n      const updatedChat = {\n        ...chat,\n        messages: updatedMessages,\n        lastMessage: messageText\n      };\n      setChatMessages(prevMessages => ({\n        ...prevMessages,\n        [chat]: {\n          messages: updatedMessages,\n          lastMessage: messageText\n        }\n      }));\n      updateChatMessages(chat.id, updatedMessages);\n      setChat(updatedChat);\n    }\n  }\n  ;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    id: \"chat_window\",\n    children: [selectedContact && /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(ProfilePic, {\n        pic: selectedContact.profilePic\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"username\",\n        children: selectedContact.displayName\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true), /*#__PURE__*/_jsxDEV(ChatButtons, {\n      chat: chat,\n      handleDeleteChat: handleDeleteChat\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"messages\",\n      ref: messagesContainerRef,\n      children: messages.slice().reverse().map((message, index) => {\n        const incoming = message.sender.username === user.username ? 0 : 1;\n        return /*#__PURE__*/_jsxDEV(Message, {\n          text: message.content,\n          time: message.time,\n          incoming: incoming\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 109,\n          columnNumber: 13\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(SendMessage, {\n      onSendMessage: handleSendMessage,\n      selectedContact: selectedContact ? selectedContact.username : null\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 96,\n    columnNumber: 5\n  }, this);\n}\n_s(ChatBox, \"WUOmNIQxQ2RJUU0njkkGHUp/Txk=\");\n_c = ChatBox;\nexport default ChatBox;\nvar _c;\n$RefreshReg$(_c, \"ChatBox\");","map":{"version":3,"names":["React","useState","useEffect","useRef","ProfilePic","ChatButtons","Message","SendMessage","jsxDEV","_jsxDEV","Fragment","_Fragment","ChatBox","_ref","_s","chat","user","selectedContact","setChat","updateChatMessages","msgIdCounter","handleDeleteChat","chatMessages","setChatMessages","messagesContainerRef","messages","prevMessages","container","current","scrollTop","scrollHeight","formatDateTime","dateTime","options","year","month","day","hour","minute","second","hour12","toLocaleString","handleSendMessage","messageText","id","res","fetch","method","headers","token","status","errorMessage","text","alert","data","json","onChatSelect","newMessage","content","time","Date","sender","updatedMessages","updatedChat","lastMessage","children","pic","profilePic","fileName","_jsxFileName","lineNumber","columnNumber","className","displayName","ref","slice","reverse","map","message","index","incoming","username","onSendMessage","_c","$RefreshReg$"],"sources":["/home/uri/שולחן העבודה/Ex2/Chat-Application/chat/src/ChatScreen/ChatBox.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from \"react\";\nimport ProfilePic from \"./ProfilePic.js\";\nimport ChatButtons from \"./ChatButtons.js\";\nimport Message from \"./Message.js\";\nimport SendMessage from \"./SendMessage.js\";\n\n\nfunction ChatBox({chat, user, selectedContact, setChat, updateChatMessages, msgIdCounter, handleDeleteChat}) {\n  const [chatMessages, setChatMessages] = useState({});\n  const messagesContainerRef = useRef(null);\n  const messages = chat ? chat.messages || [] : [];\n\n  useEffect(() => {\n    if (chat) {\n      setChatMessages((prevMessages) => ({\n        ...prevMessages,\n        [chat]: {\n          messages: chatMessages || [],\n        },\n      }));\n    }\n  }, [chat]);\n  \n\n\n  useEffect(() => {\n    const container = messagesContainerRef.current;\n    if (container && chat) {\n      container.scrollTop = container.scrollHeight;\n    }\n  }, [chat]);\n\n  const formatDateTime = (dateTime) => {\n    const options = {\n      year: \"numeric\",\n      month: \"numeric\",\n      day: \"numeric\",   \n      hour: \"numeric\",\n      minute: \"numeric\",\n      second: \"numeric\",\n      hour12: false,\n    };\n    return dateTime.toLocaleString(\"en-US\", options);\n  };\n\n  async function handleSendMessage (messageText) {\n    const id = chat.id\n    const res = await fetch(`http://localhost:5000/api/Chats/${id}/Messeges`, {\n      method: 'post',\n      headers: {\n        'Content-Type': 'application/json',\n        'Authorization': `Bearer ${user.token}`\n      },\n    });\n    if (res.status != 200){\n      const errorMessage = await res.text();\n      alert(errorMessage);\n    }\n    const data = await res.json();\n    onChatSelect(data);\n\n\n    if (chat) {\n      const newMessage = {\n        id: msgIdCounter.current++,\n        content: messageText,\n        time: formatDateTime(new Date()),\n        sender: user\n      };\n  \n      const updatedMessages = [\n        ...(chat.messages || []),\n        newMessage,\n      ];\n  \n      const updatedChat = {\n        ...chat,\n        messages: updatedMessages,\n        lastMessage: messageText\n      };\n\n  \n      setChatMessages((prevMessages) => ({\n        ...prevMessages,\n        [chat]: {\n          messages: updatedMessages,\n          lastMessage: messageText\n        },\n      }));\n      updateChatMessages(chat.id, updatedMessages);\n      setChat(updatedChat);\n    }\n  };\n\n  return (\n    <div id=\"chat_window\">\n      {selectedContact && (\n        <>\n\n          <ProfilePic pic={selectedContact.profilePic}/>\n          <span className=\"username\">{selectedContact.displayName}</span>\n        </>\n      )}\n      <ChatButtons chat={chat} handleDeleteChat={handleDeleteChat}/>\n      <div id=\"messages\" ref={messagesContainerRef}>\n      {messages.slice().reverse().map((message, index) => {\n        const incoming = message.sender.username === user.username ? 0 : 1;\n        return (\n            <Message\n            key={index}\n            text={message.content}\n            time={message.time}\n            incoming={incoming}\n            />\n        );\n        })}\n      </div>\n      <SendMessage\n        onSendMessage={handleSendMessage}\n        selectedContact={selectedContact ? selectedContact.username : null}\n      />\n    </div>\n  );\n}\n\nexport default ChatBox;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}