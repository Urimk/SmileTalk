{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\User\\\\Documents\\\\web developing\\\\exercises\\\\3\\\\part 3\\\\Chat-Application\\\\chat\\\\src\\\\ChatScreen\\\\ChatBox.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from \"react\";\nimport ProfilePic from \"./ProfilePic.js\";\nimport ChatButtons from \"./ChatButtons.js\";\nimport Message from \"./Message.js\";\nimport SendMessage from \"./SendMessage.js\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction ChatBox(_ref) {\n  _s();\n  let {\n    chat,\n    user,\n    selectedContact,\n    setChat,\n    updateChatMessages,\n    handleDeleteChat,\n    updateLastMessage,\n    getMessages\n  } = _ref;\n  const [chatMessages, setChatMessages] = useState([]);\n  const messagesContainerRef = useRef(null);\n  const messages = chat ? chat.messages || [] : [];\n  const socket = useRef(null);\n  useEffect(() => {\n    socket.current = new WebSocket(\"ws://localhost:5000\");\n    socket.current.addEventListener(\"message\", event => {\n      const data = JSON.parse(event.data);\n      if (data.event === \"chatModified\") {\n        const updatedChatId = data.data.updatedChat.id;\n        const updatedChatMessages = data.data.updatedChat.messages;\n        setChatMessages(updatedChatMessages);\n        updateChatMessages(updatedChatId, updatedChatMessages);\n      }\n    });\n    return () => {\n      socket.current.close();\n    };\n  }, []);\n  useEffect(() => {\n    if (chat) {\n      getMessages(chat).then(data => {\n        setChatMessages(data);\n      });\n    }\n  }, [chat]);\n  useEffect(() => {\n    const container = messagesContainerRef.current;\n    if (container && chat) {\n      container.scrollTop = container.scrollHeight;\n    }\n  }, [chat]);\n  async function handleSendMessage(messageText) {\n    if (chat) {\n      const msg = {\n        msg: messageText\n      };\n      const id = chat.id;\n      const res = await fetch(`http://localhost:5000/api/Chats/${id}/Messages`, {\n        method: 'post',\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': `Bearer ${user.token}`\n        },\n        'body': JSON.stringify(msg)\n      });\n      if (res.status != 200) {\n        const errorMessage = await res.text();\n        alert(res.status + \" \" + res.statusText + \"\\n\" + errorMessage);\n      } else {\n        const data = await res.json();\n        const newMessage = {\n          id: data.id,\n          created: data.created,\n          sender: {\n            \"username\": data.sender.username,\n            \"displayName\": data.sender.displayName,\n            \"profilePic\": data.sender.profilePic\n          },\n          content: data.content\n        };\n        const updatedMessages = [...(chat.messages || []), newMessage];\n        const updatedChat = {\n          ...chat,\n          messages: updatedMessages,\n          lastMessage: newMessage\n        };\n        setChatMessages(prevMessages => ({\n          ...prevMessages,\n          [chat]: {\n            messages: updatedMessages,\n            lastMessage: newMessage\n          }\n        }));\n        updateChatMessages(chat.id, updatedMessages);\n        setChat(updatedChat);\n        updateLastMessage(updatedChat);\n      }\n    }\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    id: \"chat_window\",\n    children: [selectedContact && /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(ProfilePic, {\n        pic: selectedContact.profilePic\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"username\",\n        children: selectedContact.displayName\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true), /*#__PURE__*/_jsxDEV(ChatButtons, {\n      chat: chat,\n      handleDeleteChat: handleDeleteChat\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"messages\",\n      ref: messagesContainerRef,\n      children: messages.slice().reverse().map((message, index) => {\n        const incoming = message.sender.username === user.username ? 0 : 1;\n        return /*#__PURE__*/_jsxDEV(Message, {\n          text: message.content,\n          dateAndTime: message.created,\n          incoming: incoming\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 119,\n          columnNumber: 13\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(SendMessage, {\n      onSendMessage: handleSendMessage,\n      selectedContact: selectedContact ? selectedContact.username : null\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 103,\n    columnNumber: 5\n  }, this);\n}\n_s(ChatBox, \"OUdI5iW01Z9f0V4uro/lnBgbXrk=\");\n_c = ChatBox;\nexport default ChatBox;\nvar _c;\n$RefreshReg$(_c, \"ChatBox\");","map":{"version":3,"names":["React","useState","useEffect","useRef","ProfilePic","ChatButtons","Message","SendMessage","jsxDEV","_jsxDEV","Fragment","_Fragment","ChatBox","_ref","_s","chat","user","selectedContact","setChat","updateChatMessages","handleDeleteChat","updateLastMessage","getMessages","chatMessages","setChatMessages","messagesContainerRef","messages","socket","current","WebSocket","addEventListener","event","data","JSON","parse","updatedChatId","updatedChat","id","updatedChatMessages","close","then","container","scrollTop","scrollHeight","handleSendMessage","messageText","msg","res","fetch","method","headers","token","stringify","status","errorMessage","text","alert","statusText","json","newMessage","created","sender","username","displayName","profilePic","content","updatedMessages","lastMessage","prevMessages","children","pic","fileName","_jsxFileName","lineNumber","columnNumber","className","ref","slice","reverse","map","message","index","incoming","dateAndTime","onSendMessage","_c","$RefreshReg$"],"sources":["C:/Users/User/Documents/web developing/exercises/3/part 3/Chat-Application/chat/src/ChatScreen/ChatBox.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from \"react\";\r\nimport ProfilePic from \"./ProfilePic.js\";\r\nimport ChatButtons from \"./ChatButtons.js\";\r\nimport Message from \"./Message.js\";\r\nimport SendMessage from \"./SendMessage.js\";\r\n\r\nfunction ChatBox({ chat, user, selectedContact, setChat, updateChatMessages, handleDeleteChat, updateLastMessage, getMessages}) {\r\n  const [chatMessages, setChatMessages] = useState([]);\r\n  const messagesContainerRef = useRef(null);\r\n  const messages = chat ? chat.messages || [] : [];\r\n  const socket = useRef(null);\r\n\r\n  useEffect(() => {\r\n    socket.current = new WebSocket(\"ws://localhost:5000\");\r\n\r\n    socket.current.addEventListener(\"message\", (event) => {\r\n      const data = JSON.parse(event.data);\r\n      if (data.event === \"chatModified\") {\r\n        const updatedChatId = data.data.updatedChat.id;\r\n        const updatedChatMessages = data.data.updatedChat.messages;\r\n        setChatMessages(updatedChatMessages);\r\n        updateChatMessages(updatedChatId, updatedChatMessages);\r\n      }\r\n    });\r\n\r\n    return () => {\r\n      socket.current.close();\r\n    };\r\n  }, []);\r\n  \r\n  useEffect(() => {\r\n    if (chat) {\r\n      getMessages(chat)\r\n        .then((data) => {\r\n          setChatMessages(data);\r\n        })\r\n    }\r\n  }, [chat]);\r\n  \r\n\r\n\r\n  useEffect(() => {\r\n    const container = messagesContainerRef.current;\r\n    if (container && chat) {\r\n      container.scrollTop = container.scrollHeight;\r\n    }\r\n  }, [chat]);\r\n\r\n  async function handleSendMessage (messageText) {\r\n    if (chat) {\r\n      const msg = { msg: messageText };\r\n      const id = chat.id\r\n      const res = await fetch(`http://localhost:5000/api/Chats/${id}/Messages`, {\r\n        method: 'post',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n          'Authorization': `Bearer ${user.token}`\r\n        },\r\n        'body': JSON.stringify(msg)\r\n      });\r\n      if (res.status != 200){\r\n        const errorMessage = await res.text();\r\n        alert(res.status + \" \" + res.statusText + \"\\n\" + errorMessage);\r\n      } else {\r\n        const data = await res.json();\r\n        const newMessage = {\r\n          id: data.id,\r\n          created: data.created,\r\n          sender:\r\n          {\r\n            \"username\": data.sender.username,\r\n            \"displayName\": data.sender.displayName,\r\n            \"profilePic\": data.sender.profilePic\r\n          },\r\n          content: data.content\r\n        }\r\n        const updatedMessages = [\r\n          ...(chat.messages || []),\r\n          newMessage,\r\n        ];\r\n          \r\n        const updatedChat = {\r\n          ...chat,\r\n          messages: updatedMessages,\r\n          lastMessage: newMessage\r\n        };\r\n    \r\n        setChatMessages((prevMessages) => ({\r\n          ...prevMessages,\r\n          [chat]: {\r\n            messages: updatedMessages,\r\n            lastMessage: newMessage\r\n          },\r\n        }));\r\n        updateChatMessages(chat.id, updatedMessages);\r\n        setChat(updatedChat);\r\n        updateLastMessage(updatedChat);\r\n      }\r\n    }    \r\n  }\r\n  \r\n  return (\r\n    <div id=\"chat_window\">\r\n      {selectedContact && (\r\n        <>\r\n\r\n          <ProfilePic pic={selectedContact.profilePic}/>\r\n          <span className=\"username\">{selectedContact.displayName}</span>\r\n        </>\r\n      )}\r\n      <ChatButtons chat={chat} handleDeleteChat={\r\n        handleDeleteChat\r\n      }/>\r\n      <div id=\"messages\" ref={messagesContainerRef}>\r\n      {messages.slice().reverse().map((message, index) => {\r\n\r\n        const incoming = message.sender.username === user.username ? 0 : 1;\r\n        return (\r\n            <Message\r\n            key={index}\r\n            text={message.content}\r\n            dateAndTime={message.created}\r\n            incoming={incoming}\r\n            />\r\n        );\r\n        })}\r\n      </div>\r\n      <SendMessage\r\n        onSendMessage={handleSendMessage}\r\n        selectedContact={selectedContact ? selectedContact.username : null}\r\n      />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default ChatBox;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}