{"ast":null,"code":"var _jsxFileName = \"/home/uri/\\u05E9\\u05D5\\u05DC\\u05D7\\u05DF \\u05D4\\u05E2\\u05D1\\u05D5\\u05D3\\u05D4/Ex2/Chat-Application/chat/src/ChatScreen/ChatBox.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from \"react\";\nimport ProfilePic from \"./ProfilePic.js\";\nimport ChatButtons from \"./ChatButtons.js\";\nimport Message from \"./Message.js\";\nimport SendMessage from \"./SendMessage.js\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction ChatBox(_ref) {\n  _s();\n  var _this = this;\n  let {\n    chat,\n    user,\n    selectedContact,\n    setChat,\n    updateChatMessages,\n    handleDeleteChat,\n    updateLastMessage,\n    getMessages\n  } = _ref;\n  return function (getMessages) {\n    const [chatMessages, setChatMessages] = useState([]);\n    const messagesContainerRef = useRef(null);\n    const messages = chat ? chat.messages || [] : [];\n    useEffect(() => {\n      if (chat) {\n        getMessages();\n      }\n    }, [chat]);\n    useEffect(() => {\n      const container = messagesContainerRef.current;\n      if (container && chat) {\n        container.scrollTop = container.scrollHeight;\n      }\n    }, [chat]);\n    async function handleSendMessage(messageText) {\n      if (chat) {\n        const msg = {\n          msg: messageText\n        };\n        const id = chat.id;\n        const res = await fetch(`http://localhost:5000/api/Chats/${id}/Messages`, {\n          method: 'post',\n          headers: {\n            'Content-Type': 'application/json',\n            'Authorization': `Bearer ${user.token}`\n          },\n          'body': JSON.stringify(msg)\n        });\n        if (res.status != 200) {\n          const errorMessage = await res.text();\n          alert(res.status + \" \" + res.statusText + \"\\n\" + errorMessage);\n        } else {\n          const data = await res.json();\n          const newMessage = {\n            id: data.id,\n            created: data.created,\n            sender: {\n              \"username\": data.sender.username,\n              \"displayName\": data.sender.displayName,\n              \"profilePic\": data.sender.profilePic\n            },\n            content: data.content\n          };\n          const updatedMessages = [...(chat.messages || []), newMessage];\n          const updatedChat = {\n            ...chat,\n            messages: updatedMessages,\n            lastMessage: newMessage\n          };\n          setChatMessages(prevMessages => ({\n            ...prevMessages,\n            [chat]: {\n              messages: updatedMessages,\n              lastMessage: newMessage\n            }\n          }));\n          updateChatMessages(chat.id, updatedMessages);\n          setChat(updatedChat);\n          updateLastMessage(updatedChat);\n        }\n      }\n    }\n    async function getMessages() {\n      const id = chat.id;\n      const res = await fetch(`http://localhost:5000/api/Chats/${id}/Messages`, {\n        method: 'get',\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': `Bearer ${user.token}`\n        }\n      });\n      if (res.status != 200) {\n        const errorMessage = await res.text();\n        alert(res.status + \" \" + res.statusText + \"\\n\" + errorMessage);\n      } else {\n        const data = await res.json();\n        setChatMessages(data);\n      }\n    }\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"chat_window\",\n      children: [selectedContact && /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(ProfilePic, {\n          pic: selectedContact.profilePic\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 104,\n          columnNumber: 11\n        }, _this), /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"username\",\n          children: selectedContact.displayName\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 105,\n          columnNumber: 11\n        }, _this)]\n      }, void 0, true), /*#__PURE__*/_jsxDEV(ChatButtons, {\n        chat: chat,\n        handleDeleteChat: handleDeleteChat\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 7\n      }, _this), /*#__PURE__*/_jsxDEV(\"div\", {\n        id: \"messages\",\n        ref: messagesContainerRef,\n        children: messages.slice().reverse().map((message, index) => {\n          const incoming = message.sender.username === user.username ? 0 : 1;\n          return /*#__PURE__*/_jsxDEV(Message, {\n            text: message.content,\n            dateAndTime: message.created,\n            incoming: incoming\n          }, index, false, {\n            fileName: _jsxFileName,\n            lineNumber: 113,\n            columnNumber: 13\n          }, _this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 7\n      }, _this), /*#__PURE__*/_jsxDEV(SendMessage, {\n        onSendMessage: handleSendMessage,\n        selectedContact: selectedContact ? selectedContact.username : null\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 7\n      }, _this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 5\n    }, _this);\n  }(getMessages);\n}\n_s(ChatBox, \"mCczmDAGt+0Q/C4Ge7E5iAFuFEM=\");\n_c = ChatBox;\nexport default ChatBox;\nvar _c;\n$RefreshReg$(_c, \"ChatBox\");","map":{"version":3,"names":["React","useState","useEffect","useRef","ProfilePic","ChatButtons","Message","SendMessage","jsxDEV","_jsxDEV","Fragment","_Fragment","ChatBox","_ref","_s","_this","chat","user","selectedContact","setChat","updateChatMessages","handleDeleteChat","updateLastMessage","getMessages","chatMessages","setChatMessages","messagesContainerRef","messages","container","current","scrollTop","scrollHeight","handleSendMessage","messageText","msg","id","res","fetch","method","headers","token","JSON","stringify","status","errorMessage","text","alert","statusText","data","json","newMessage","created","sender","username","displayName","profilePic","content","updatedMessages","updatedChat","lastMessage","prevMessages","children","pic","fileName","_jsxFileName","lineNumber","columnNumber","className","ref","slice","reverse","map","message","index","incoming","dateAndTime","onSendMessage","_c","$RefreshReg$"],"sources":["/home/uri/שולחן העבודה/Ex2/Chat-Application/chat/src/ChatScreen/ChatBox.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from \"react\";\nimport ProfilePic from \"./ProfilePic.js\";\nimport ChatButtons from \"./ChatButtons.js\";\nimport Message from \"./Message.js\";\nimport SendMessage from \"./SendMessage.js\";\n\n\nfunction ChatBox({chat, user, selectedContact, setChat, updateChatMessages, handleDeleteChat, updateLastMessage, getMessages}) {\n  const [chatMessages, setChatMessages] = useState([]);\n  const messagesContainerRef = useRef(null);\n  const messages = chat ? chat.messages || [] : [];\n\n  useEffect(() => {\n    if (chat) {\n      getMessages();\n    }\n  }, [chat]);\n  \n\n\n  useEffect(() => {\n    const container = messagesContainerRef.current;\n    if (container && chat) {\n      container.scrollTop = container.scrollHeight;\n    }\n  }, [chat]);\n\n  async function handleSendMessage (messageText) {\n    if (chat) {\n      const msg = { msg: messageText };\n      const id = chat.id\n      const res = await fetch(`http://localhost:5000/api/Chats/${id}/Messages`, {\n        method: 'post',\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': `Bearer ${user.token}`\n        },\n        'body': JSON.stringify(msg)\n      });\n      if (res.status != 200){\n        const errorMessage = await res.text();\n        alert(res.status + \" \" + res.statusText + \"\\n\" + errorMessage);\n      } else {\n        const data = await res.json();\n        const newMessage = {\n          id: data.id,\n          created: data.created,\n          sender:\n          {\n            \"username\": data.sender.username,\n            \"displayName\": data.sender.displayName,\n            \"profilePic\": data.sender.profilePic\n          },\n          content: data.content\n        }\n        const updatedMessages = [\n          ...(chat.messages || []),\n          newMessage,\n        ];\n          \n        const updatedChat = {\n          ...chat,\n          messages: updatedMessages,\n          lastMessage: newMessage\n        };\n    \n        setChatMessages((prevMessages) => ({\n          ...prevMessages,\n          [chat]: {\n            messages: updatedMessages,\n            lastMessage: newMessage\n          },\n        }));\n        updateChatMessages(chat.id, updatedMessages);\n        setChat(updatedChat);\n        updateLastMessage(updatedChat);\n      }\n    }    \n  }\n  async function getMessages() {\n    const id = chat.id;\n    const res = await fetch(`http://localhost:5000/api/Chats/${id}/Messages`, {\n      method: 'get',\n      headers: {\n        'Content-Type': 'application/json',\n        'Authorization': `Bearer ${user.token}`\n      },\n    });\n    if (res.status != 200){\n      const errorMessage = await res.text();\n      alert(res.status + \" \" + res.statusText + \"\\n\" + errorMessage);\n    } else {\n      const data = await res.json();\n      setChatMessages(data);\n    }\n  }\n  \n\n  return (\n    <div id=\"chat_window\">\n      {selectedContact && (\n        <>\n\n          <ProfilePic pic={selectedContact.profilePic}/>\n          <span className=\"username\">{selectedContact.displayName}</span>\n        </>\n      )}\n      <ChatButtons chat={chat} handleDeleteChat={handleDeleteChat}/>\n      <div id=\"messages\" ref={messagesContainerRef}>\n      {messages.slice().reverse().map((message, index) => {\n        const incoming = message.sender.username === user.username ? 0 : 1;\n        return (\n            <Message\n            key={index}\n            text={message.content}\n            dateAndTime={message.created}\n            incoming={incoming}\n            />\n        );\n        })}\n      </div>\n      <SendMessage\n        onSendMessage={handleSendMessage}\n        selectedContact={selectedContact ? selectedContact.username : null}\n      />\n    </div>\n  );\n}\n\nexport default ChatBox;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}