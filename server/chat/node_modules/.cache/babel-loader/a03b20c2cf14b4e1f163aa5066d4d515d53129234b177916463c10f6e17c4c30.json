{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\User\\\\Documents\\\\web developing\\\\exercises\\\\3\\\\Chat-Application\\\\chat\\\\src\\\\ChatScreen\\\\ChatBox.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from \"react\";\nimport ProfilePic from \"./ProfilePic\";\nimport ChatButtons from \"./ChatButtons.js\";\nimport Message from \"./Message.js\";\nimport SendMessage from \"./SendMessage.js\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction ChatBox(_ref) {\n  _s();\n  let {\n    selectedContact,\n    setselectedContact,\n    updateContactMessages\n  } = _ref;\n  const [contactMessages, setContactMessages] = useState({});\n  const messagesContainerRef = useRef(null);\n  const messages = selectedContact ? contactMessages[selectedContact.name] || [] : [];\n  useEffect(() => {\n    if (selectedContact) {\n      setContactMessages(prevMessages => ({\n        ...prevMessages,\n        [selectedContact.name]: prevMessages[selectedContact.name] || selectedContact.messages || []\n      }));\n    }\n  }, [selectedContact]);\n  useEffect(() => {\n    const container = messagesContainerRef.current;\n    container.scrollTop = container.scrollHeight;\n  }, [contactMessages]);\n  const formatDateTime = dateTime => {\n    const options = {\n      year: \"numeric\",\n      month: \"numeric\",\n      day: \"numeric\",\n      hour: \"numeric\",\n      minute: \"numeric\",\n      second: \"numeric\",\n      hour12: false\n    };\n    return dateTime.toLocaleString(\"en-US\", options);\n  };\n  const handleSendMessage = messageText => {\n    if (selectedContact) {\n      const newMessage = {\n        text: messageText,\n        time: formatDateTime(new Date())\n      };\n      const updatedMessages = [...(contactMessages[selectedContact.name] || []), newMessage];\n      const updatedContact = {\n        ...selectedContact,\n        messages: updatedMessages\n      };\n      setContactMessages(prevMessages => ({\n        ...prevMessages,\n        [selectedContact.name]: updatedMessages\n      }));\n      updateContactMessages(selectedContact.name, updatedMessages);\n      setselectedContact(updatedContact);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    id: \"chat_window\",\n    children: [selectedContact && /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(ProfilePic, {\n        pic: selectedContact.img,\n        online: 0\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"username\",\n        children: selectedContact.name\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true), /*#__PURE__*/_jsxDEV(\"span\", {\n      id: \"online_status\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ChatButtons, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"messages\",\n      ref: messagesContainerRef,\n      children: messages.slice().reverse().map((message, index) => {\n        return /*#__PURE__*/_jsxDEV(Message, {\n          text: message.text,\n          time: message.time,\n          incoming: 0\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 80,\n          columnNumber: 13\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(SendMessage, {\n      onSendMessage: handleSendMessage,\n      selectedContact: selectedContact ? selectedContact.name : null\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 68,\n    columnNumber: 5\n  }, this);\n}\n_s(ChatBox, \"aJfMNvT81eYpW7Mx74V+a7HvGuw=\");\n_c = ChatBox;\nexport default ChatBox;\nvar _c;\n$RefreshReg$(_c, \"ChatBox\");","map":{"version":3,"names":["React","useState","useEffect","useRef","ProfilePic","ChatButtons","Message","SendMessage","jsxDEV","_jsxDEV","Fragment","_Fragment","ChatBox","_ref","_s","selectedContact","setselectedContact","updateContactMessages","contactMessages","setContactMessages","messagesContainerRef","messages","name","prevMessages","container","current","scrollTop","scrollHeight","formatDateTime","dateTime","options","year","month","day","hour","minute","second","hour12","toLocaleString","handleSendMessage","messageText","newMessage","text","time","Date","updatedMessages","updatedContact","id","children","pic","img","online","fileName","_jsxFileName","lineNumber","columnNumber","className","ref","slice","reverse","map","message","index","incoming","onSendMessage","_c","$RefreshReg$"],"sources":["C:/Users/User/Documents/web developing/exercises/3/Chat-Application/chat/src/ChatScreen/ChatBox.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from \"react\";\r\nimport ProfilePic from \"./ProfilePic\";\r\nimport ChatButtons from \"./ChatButtons.js\";\r\nimport Message from \"./Message.js\";\r\nimport SendMessage from \"./SendMessage.js\";\r\n\r\nfunction ChatBox({ selectedContact, setselectedContact, updateContactMessages }) {\r\n  const [contactMessages, setContactMessages] = useState({});\r\n  const messagesContainerRef = useRef(null);\r\n  const messages = selectedContact ? contactMessages[selectedContact.name] || [] : [];\r\n\r\n\r\n  useEffect(() => {\r\n    if (selectedContact) {\r\n      setContactMessages((prevMessages) => ({\r\n        ...prevMessages,\r\n        [selectedContact.name]: prevMessages[selectedContact.name] || selectedContact.messages || [],\r\n      }));\r\n    }\r\n  }, [selectedContact]);\r\n\r\n\r\n  useEffect(() => {\r\n    const container = messagesContainerRef.current;\r\n    container.scrollTop = container.scrollHeight;\r\n  }, [contactMessages]);\r\n\r\n  const formatDateTime = (dateTime) => {\r\n    const options = {\r\n      year: \"numeric\",\r\n      month: \"numeric\",\r\n      day: \"numeric\",   \r\n      hour: \"numeric\",\r\n      minute: \"numeric\",\r\n      second: \"numeric\",\r\n      hour12: false,\r\n    };\r\n    return dateTime.toLocaleString(\"en-US\", options);\r\n  };\r\n\r\n  const handleSendMessage = (messageText) => {\r\n    if (selectedContact) {\r\n      const newMessage = {\r\n        text: messageText,\r\n        time: formatDateTime(new Date()),\r\n      };\r\n  \r\n      const updatedMessages = [\r\n        ...(contactMessages[selectedContact.name] || []),\r\n        newMessage,\r\n      ];\r\n  \r\n      const updatedContact = {\r\n        ...selectedContact,\r\n        messages: updatedMessages,\r\n      };\r\n  \r\n      setContactMessages((prevMessages) => ({\r\n        ...prevMessages,\r\n        [selectedContact.name]: updatedMessages,\r\n      }));\r\n  \r\n      updateContactMessages(selectedContact.name, updatedMessages);\r\n      setselectedContact(updatedContact);\r\n    }\r\n  };\r\n  return (\r\n    <div id=\"chat_window\">\r\n      {selectedContact && (\r\n        <>\r\n          <ProfilePic pic={selectedContact.img} online={0} />\r\n          <span className=\"username\">{selectedContact.name}</span>\r\n        </>\r\n      )}\r\n      <span id=\"online_status\"></span>\r\n      <ChatButtons />\r\n      <div id=\"messages\" ref={messagesContainerRef}>\r\n      {messages.slice().reverse().map((message, index) => {\r\n        return (\r\n            <Message\r\n            key={index}\r\n            text={message.text}\r\n            time={message.time}\r\n            incoming={0}\r\n            />\r\n        );\r\n        })}\r\n      </div>\r\n      <SendMessage\r\n        onSendMessage={handleSendMessage}\r\n        selectedContact={selectedContact ? selectedContact.name : null}\r\n      />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default ChatBox;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}