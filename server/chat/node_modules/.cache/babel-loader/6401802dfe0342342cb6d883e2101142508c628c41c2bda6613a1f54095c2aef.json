{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\User\\\\Documents\\\\web developing\\\\exercises\\\\3\\\\part 3\\\\Chat-Application\\\\chat\\\\src\\\\ChatScreen\\\\ChatBox.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from \"react\";\nimport ProfilePic from \"./ProfilePic.js\";\nimport ChatButtons from \"./ChatButtons.js\";\nimport Message from \"./Message.js\";\nimport SendMessage from \"./SendMessage.js\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction ChatBox(_ref) {\n  _s();\n  let {\n    chat,\n    user,\n    selectedContact,\n    setSelectedContact,\n    setChat,\n    updateChatMessages,\n    handleDeleteChat,\n    updateLastMessage,\n    getMessages\n  } = _ref;\n  const [chatMessages, setChatMessages] = useState([]);\n  const messagesContainerRef = useRef(null);\n  const [refresh, setRefresh] = useState(false);\n  const socket = useRef(null);\n  let messages = chat ? chat.messages || [] : [];\n  useEffect(() => {\n    socket.current = new WebSocket(\"ws://localhost:5000\");\n    socket.current.addEventListener(\"open\", () => {\n      console.log(\"WebSocket connection established\");\n    });\n    socket.current.addEventListener(\"message\", event => {\n      const data = JSON.parse(event.data);\n      if (data.event === \"chatModified\" && data.data.updatedChat.users.find(u => u.username === user.username)) {\n        const updatedChatId = data.data.updatedChat.id;\n        const updatedChatMessages = data.data.updatedChat.messages;\n        setChatMessages(updatedChatMessages);\n        updateChatMessages(updatedChatId, updatedChatMessages);\n      } else if (data.event === \"chatRemoved\" && data.data.deletedChat.users.find(u => u.username === user.username)) {\n        const deletedChat = data.data.deletedChat;\n        if (selectedContact.username === data.data.username) {\n          setChat(null);\n          setSelectedContact(null);\n          setRefresh(true); // Set refresh to trigger a re-render\n        }\n      }\n    });\n\n    return () => {\n      socket.current.close();\n    };\n  }, []);\n  useEffect(() => {\n    if (chat || refresh) {\n      getMessages(chat).then(data => {\n        setChatMessages(data);\n        setRefresh(false); // Reset refresh after re-rendering\n      });\n    }\n  }, [chat, refresh, getMessages]);\n  useEffect(() => {\n    const container = messagesContainerRef.current;\n    if (container && chat) {\n      container.scrollTop = container.scrollHeight;\n    }\n  }, [chat]);\n  async function handleSendMessage(messageText) {\n    if (chat) {\n      const msg = {\n        msg: messageText\n      };\n      const id = chat.id;\n      const res = await fetch(`http://localhost:5000/api/Chats/${id}/Messages`, {\n        method: 'post',\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': `Bearer ${user.token}`\n        },\n        'body': JSON.stringify(msg)\n      });\n      if (res.status != 200) {\n        const errorMessage = await res.text();\n        alert(res.status + \" \" + res.statusText + \"\\n\" + errorMessage);\n      } else {\n        const data = await res.json();\n        const newMessage = {\n          id: data.id,\n          created: data.created,\n          sender: {\n            \"username\": data.sender.username,\n            \"displayName\": data.sender.displayName,\n            \"profilePic\": data.sender.profilePic\n          },\n          content: data.content\n        };\n        const updatedMessages = [...(chat.messages || []), newMessage];\n        const updatedChat = {\n          ...chat,\n          messages: updatedMessages,\n          lastMessage: newMessage\n        };\n        setChatMessages(prevMessages => ({\n          ...prevMessages,\n          [chat]: {\n            messages: updatedMessages,\n            lastMessage: newMessage\n          }\n        }));\n        updateChatMessages(chat.id, updatedMessages);\n        setChat(updatedChat);\n        updateLastMessage(updatedChat);\n      }\n    }\n  }\n  return refresh ? null : /*#__PURE__*/_jsxDEV(\"div\", {\n    id: \"chat_window\",\n    children: [selectedContact && /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(ProfilePic, {\n        pic: selectedContact.profilePic\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 120,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"username\",\n        children: selectedContact.displayName\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 121,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true), /*#__PURE__*/_jsxDEV(ChatButtons, {\n      chat: chat,\n      handleDeleteChat: handleDeleteChat\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"messages\",\n      ref: messagesContainerRef,\n      children: messages.slice().reverse().map((message, index) => {\n        const incoming = message.sender.username === user.username ? 0 : 1;\n        return /*#__PURE__*/_jsxDEV(Message, {\n          text: message.content,\n          dateAndTime: message.created,\n          incoming: incoming\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 132,\n          columnNumber: 13\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 127,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(SendMessage, {\n      onSendMessage: handleSendMessage,\n      selectedContact: selectedContact ? selectedContact.username : null\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 141,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 116,\n    columnNumber: 5\n  }, this);\n}\n_s(ChatBox, \"twfP8yH6gU+cxUIMI15NcZJaGTA=\");\n_c = ChatBox;\nexport default ChatBox;\nvar _c;\n$RefreshReg$(_c, \"ChatBox\");","map":{"version":3,"names":["React","useState","useEffect","useRef","ProfilePic","ChatButtons","Message","SendMessage","jsxDEV","_jsxDEV","Fragment","_Fragment","ChatBox","_ref","_s","chat","user","selectedContact","setSelectedContact","setChat","updateChatMessages","handleDeleteChat","updateLastMessage","getMessages","chatMessages","setChatMessages","messagesContainerRef","refresh","setRefresh","socket","messages","current","WebSocket","addEventListener","console","log","event","data","JSON","parse","updatedChat","users","find","u","username","updatedChatId","id","updatedChatMessages","deletedChat","close","then","container","scrollTop","scrollHeight","handleSendMessage","messageText","msg","res","fetch","method","headers","token","stringify","status","errorMessage","text","alert","statusText","json","newMessage","created","sender","displayName","profilePic","content","updatedMessages","lastMessage","prevMessages","children","pic","fileName","_jsxFileName","lineNumber","columnNumber","className","ref","slice","reverse","map","message","index","incoming","dateAndTime","onSendMessage","_c","$RefreshReg$"],"sources":["C:/Users/User/Documents/web developing/exercises/3/part 3/Chat-Application/chat/src/ChatScreen/ChatBox.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from \"react\";\r\nimport ProfilePic from \"./ProfilePic.js\";\r\nimport ChatButtons from \"./ChatButtons.js\";\r\nimport Message from \"./Message.js\";\r\nimport SendMessage from \"./SendMessage.js\";\r\n\r\nfunction ChatBox({ chat, user, selectedContact, setSelectedContact, setChat, updateChatMessages, handleDeleteChat, updateLastMessage, getMessages }) {\r\n  const [chatMessages, setChatMessages] = useState([]);\r\n  const messagesContainerRef = useRef(null);\r\n  const [refresh, setRefresh] = useState(false);\r\n  const socket = useRef(null);\r\n  let messages = chat ? chat.messages || [] : [];\r\n\r\n  useEffect(() => {\r\n    socket.current = new WebSocket(\"ws://localhost:5000\");\r\n\r\n    socket.current.addEventListener(\"open\", () => {\r\n      console.log(\"WebSocket connection established\");\r\n    });\r\n\r\n    socket.current.addEventListener(\"message\", (event) => {\r\n      const data = JSON.parse(event.data);\r\n      if (data.event === \"chatModified\" &&\r\n        data.data.updatedChat.users.find((u) => u.username === user.username)) {\r\n        const updatedChatId = data.data.updatedChat.id;\r\n        const updatedChatMessages = data.data.updatedChat.messages;\r\n        setChatMessages(updatedChatMessages);\r\n        updateChatMessages(updatedChatId, updatedChatMessages);\r\n      } else if (data.event === \"chatRemoved\" &&\r\n        data.data.deletedChat.users.find((u) => u.username === user.username)) {\r\n        const deletedChat = data.data.deletedChat;\r\n        if (selectedContact.username === data.data.username) {\r\n          setChat(null);\r\n          setSelectedContact(null);\r\n          setRefresh(true); // Set refresh to trigger a re-render\r\n        }\r\n      }\r\n    });\r\n\r\n    return () => {\r\n      socket.current.close();\r\n    };\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (chat || refresh) {\r\n      getMessages(chat)\r\n        .then((data) => {\r\n          setChatMessages(data);\r\n          setRefresh(false); // Reset refresh after re-rendering\r\n        });\r\n    }\r\n  }, [chat, refresh, getMessages]);\r\n\r\n  useEffect(() => {\r\n    const container = messagesContainerRef.current;\r\n    if (container && chat) {\r\n      container.scrollTop = container.scrollHeight;\r\n    }\r\n  }, [chat]);\r\n\r\n  async function handleSendMessage (messageText) {\r\n    if (chat) {\r\n      const msg = { msg: messageText };\r\n      const id = chat.id\r\n      const res = await fetch(`http://localhost:5000/api/Chats/${id}/Messages`, {\r\n        method: 'post',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n          'Authorization': `Bearer ${user.token}`\r\n        },\r\n        'body': JSON.stringify(msg)\r\n      });\r\n      if (res.status != 200){\r\n        const errorMessage = await res.text();\r\n        alert(res.status + \" \" + res.statusText + \"\\n\" + errorMessage);\r\n      } else {\r\n        const data = await res.json();\r\n        const newMessage = {\r\n          id: data.id,\r\n          created: data.created,\r\n          sender:\r\n          {\r\n            \"username\": data.sender.username,\r\n            \"displayName\": data.sender.displayName,\r\n            \"profilePic\": data.sender.profilePic\r\n          },\r\n          content: data.content\r\n        }\r\n        const updatedMessages = [\r\n          ...(chat.messages || []),\r\n          newMessage,\r\n        ];\r\n          \r\n        const updatedChat = {\r\n          ...chat,\r\n          messages: updatedMessages,\r\n          lastMessage: newMessage\r\n        };\r\n    \r\n        setChatMessages((prevMessages) => ({\r\n          ...prevMessages,\r\n          [chat]: {\r\n            messages: updatedMessages,\r\n            lastMessage: newMessage\r\n          },\r\n        }));\r\n        updateChatMessages(chat.id, updatedMessages);\r\n        setChat(updatedChat);\r\n        updateLastMessage(updatedChat);\r\n      }\r\n    }    \r\n  }\r\n  \r\n  return refresh ? null : (\r\n    <div id=\"chat_window\">\r\n      {selectedContact && (\r\n        <>\r\n\r\n          <ProfilePic pic={selectedContact.profilePic}/>\r\n          <span className=\"username\">{selectedContact.displayName}</span>\r\n        </>\r\n      )}\r\n      <ChatButtons chat={chat} handleDeleteChat={\r\n        handleDeleteChat\r\n      }/>\r\n      <div id=\"messages\" ref={messagesContainerRef}>\r\n      {messages.slice().reverse().map((message, index) => {\r\n\r\n        const incoming = message.sender.username === user.username ? 0 : 1;\r\n        return (\r\n            <Message\r\n            key={index}\r\n            text={message.content}\r\n            dateAndTime={message.created}\r\n            incoming={incoming}\r\n            />\r\n        );\r\n        })}\r\n      </div>\r\n      <SendMessage\r\n        onSendMessage={handleSendMessage}\r\n        selectedContact={selectedContact ? selectedContact.username : null}\r\n      />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default ChatBox;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}