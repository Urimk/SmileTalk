{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\User\\\\Documents\\\\web developing\\\\exercises\\\\3\\\\part 3\\\\Chat-Application\\\\chat\\\\src\\\\ChatScreen\\\\ChatBox.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from \"react\";\nimport ProfilePic from \"./ProfilePic.js\";\nimport ChatButtons from \"./ChatButtons.js\";\nimport Message from \"./Message.js\";\nimport SendMessage from \"./SendMessage.js\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction ChatBox(_ref) {\n  _s();\n  let {\n    chat,\n    user,\n    selectedContact,\n    setSelectedContact,\n    setChat,\n    updateChatMessages,\n    handleDeleteChat,\n    updateLastMessage,\n    getMessages\n  } = _ref;\n  const [chatMessages, setChatMessages] = useState([]);\n  const messagesContainerRef = useRef(null);\n  const socket = useRef(null);\n  let messages = chat ? chat.messages || [] : [];\n  useEffect(() => {\n    socket.current = new WebSocket(\"ws://localhost:5000\");\n    socket.current.addEventListener(\"open\", () => {\n      console.log(\"WebSocket connection established\");\n    });\n    socket.current.addEventListener(\"message\", async event => {\n      const data = JSON.parse(event.data);\n      console.log(selectedContact);\n      if (data.event === \"chatModified\" && chat && data.data.updatedChat.id === chat.id) {\n        const updatedChatId = data.data.updatedChat.id;\n        const updatedChatMessages = data.data.updatedChat.messages;\n        setChatMessages(updatedChatMessages);\n        updateChatMessages(updatedChatId, updatedChatMessages);\n        messages = updatedChatMessages;\n      } else if (data.event === \"chatRemoved\" && data.data.deletedChat.users.find(u => u.username === selectedContact.username)) {\n        setSelectedContact(null);\n        messages = [];\n      }\n    });\n    return () => {\n      socket.current.close();\n    };\n  }, [selectedContact, setSelectedContact, messages]);\n  useEffect(() => {\n    if (chat) {\n      getMessages(chat).then(data => {\n        setChatMessages(data);\n      });\n    }\n  }, [chat]);\n  useEffect(() => {\n    setChatMessages(chatMessages);\n  }, [chatMessages]);\n  useEffect(() => {\n    const container = messagesContainerRef.current;\n    if (container && chat) {\n      container.scrollTop = container.scrollHeight;\n    }\n  }, [chat]);\n  async function handleSendMessage(messageText) {\n    if (chat) {\n      const msg = {\n        msg: messageText\n      };\n      const id = chat.id;\n      const res = await fetch(`http://localhost:5000/api/Chats/${id}/Messages`, {\n        method: \"post\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n          Authorization: `Bearer ${user.token}`\n        },\n        body: JSON.stringify(msg)\n      });\n      if (res.status != 200) {\n        const errorMessage = await res.text();\n        alert(res.status + \" \" + res.statusText + \"\\n\" + errorMessage);\n      } else {\n        const data = await res.json();\n        const newMessage = {\n          id: data.id,\n          created: data.created,\n          sender: {\n            username: data.sender.username,\n            displayName: data.sender.displayName,\n            profilePic: data.sender.profilePic\n          },\n          content: data.content\n        };\n        const updatedMessages = [...chatMessages, newMessage];\n        const updatedChat = {\n          ...chat,\n          messages: updatedMessages,\n          lastMessage: newMessage\n        };\n        setChatMessages(updatedMessages);\n        updateChatMessages(chat.id, updatedMessages);\n        setChat(updatedChat);\n        updateLastMessage(updatedChat);\n      }\n    }\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    id: \"chat_window\",\n    children: [selectedContact && /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(ProfilePic, {\n        pic: selectedContact.profilePic\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"username\",\n        children: selectedContact.displayName\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true), /*#__PURE__*/_jsxDEV(ChatButtons, {\n      chat: chat,\n      handleDeleteChat: handleDeleteChat\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"messages\",\n      ref: messagesContainerRef,\n      children: chatMessages.slice().reverse().map((message, index) => {\n        const incoming = message.sender.username === user.username ? 0 : 1;\n        return /*#__PURE__*/_jsxDEV(Message, {\n          text: message.content,\n          dateAndTime: message.created,\n          incoming: incoming\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 122,\n          columnNumber: 13\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(SendMessage, {\n      onSendMessage: handleSendMessage,\n      selectedContact: selectedContact ? selectedContact.username : null\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 109,\n    columnNumber: 5\n  }, this);\n}\n_s(ChatBox, \"tTRvn6QzhzlVto6wNETzVB3+gFM=\");\n_c = ChatBox;\nexport default ChatBox;\nvar _c;\n$RefreshReg$(_c, \"ChatBox\");","map":{"version":3,"names":["React","useState","useEffect","useRef","ProfilePic","ChatButtons","Message","SendMessage","jsxDEV","_jsxDEV","Fragment","_Fragment","ChatBox","_ref","_s","chat","user","selectedContact","setSelectedContact","setChat","updateChatMessages","handleDeleteChat","updateLastMessage","getMessages","chatMessages","setChatMessages","messagesContainerRef","socket","messages","current","WebSocket","addEventListener","console","log","event","data","JSON","parse","updatedChat","id","updatedChatId","updatedChatMessages","deletedChat","users","find","u","username","close","then","container","scrollTop","scrollHeight","handleSendMessage","messageText","msg","res","fetch","method","headers","Authorization","token","body","stringify","status","errorMessage","text","alert","statusText","json","newMessage","created","sender","displayName","profilePic","content","updatedMessages","lastMessage","children","pic","fileName","_jsxFileName","lineNumber","columnNumber","className","ref","slice","reverse","map","message","index","incoming","dateAndTime","onSendMessage","_c","$RefreshReg$"],"sources":["C:/Users/User/Documents/web developing/exercises/3/part 3/Chat-Application/chat/src/ChatScreen/ChatBox.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from \"react\";\r\nimport ProfilePic from \"./ProfilePic.js\";\r\nimport ChatButtons from \"./ChatButtons.js\";\r\nimport Message from \"./Message.js\";\r\nimport SendMessage from \"./SendMessage.js\";\r\n\r\nfunction ChatBox({ chat, user, selectedContact,setSelectedContact, setChat, updateChatMessages, handleDeleteChat, updateLastMessage, getMessages}) {\r\n  const [chatMessages, setChatMessages] = useState([]);\r\n  const messagesContainerRef = useRef(null);\r\n  const socket = useRef(null);\r\n  let messages = chat ? chat.messages || [] : [];\r\n\r\n  useEffect(() => {\r\n    socket.current = new WebSocket(\"ws://localhost:5000\");\r\n\r\n    socket.current.addEventListener(\"open\", () => {\r\n      console.log(\"WebSocket connection established\");\r\n    });\r\n\r\n    socket.current.addEventListener(\"message\", async (event) => {\r\n      const data = JSON.parse(event.data);\r\n      console.log(selectedContact);\r\n      if (data.event === \"chatModified\" && chat && data.data.updatedChat.id === chat.id) {\r\n        const updatedChatId = data.data.updatedChat.id;\r\n        const updatedChatMessages = data.data.updatedChat.messages;\r\n        setChatMessages(updatedChatMessages);\r\n        updateChatMessages(updatedChatId, updatedChatMessages);\r\n        messages = updatedChatMessages;\r\n      } \r\n      else if(data.event === \"chatRemoved\"&&\r\n      data.data.deletedChat.users.find((u) => u.username === selectedContact.username)) {\r\n          setSelectedContact(null)\r\n          messages = []\r\n        }\r\n    });\r\n\r\n    return () => {\r\n      socket.current.close();\r\n    };\r\n  }, [selectedContact,setSelectedContact,messages]);\r\n  \r\n  useEffect(() => {\r\n    if (chat) {\r\n      getMessages(chat)\r\n        .then((data) => {\r\n          setChatMessages(data);\r\n        })\r\n    }\r\n  }, [chat]);\r\n\r\n  useEffect(() => {\r\n    setChatMessages(chatMessages);\r\n  }, [chatMessages]);\r\n  \r\n\r\n  \r\n\r\n\r\n  useEffect(() => {\r\n    const container = messagesContainerRef.current;\r\n    if (container && chat) {\r\n      container.scrollTop = container.scrollHeight;\r\n    }\r\n  }, [chat]);\r\n\r\n  async function handleSendMessage(messageText) {\r\n    if (chat) {\r\n      const msg = { msg: messageText };\r\n      const id = chat.id;\r\n      const res = await fetch(`http://localhost:5000/api/Chats/${id}/Messages`, {\r\n        method: \"post\",\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n          Authorization: `Bearer ${user.token}`,\r\n        },\r\n        body: JSON.stringify(msg),\r\n      });\r\n      if (res.status != 200) {\r\n        const errorMessage = await res.text();\r\n        alert(res.status + \" \" + res.statusText + \"\\n\" + errorMessage);\r\n      } else {\r\n        const data = await res.json();\r\n        const newMessage = {\r\n          id: data.id,\r\n          created: data.created,\r\n          sender: {\r\n            username: data.sender.username,\r\n            displayName: data.sender.displayName,\r\n            profilePic: data.sender.profilePic,\r\n          },\r\n          content: data.content,\r\n        };\r\n        const updatedMessages = [...chatMessages, newMessage];\r\n        const updatedChat = {\r\n          ...chat,\r\n          messages: updatedMessages,\r\n          lastMessage: newMessage,\r\n        };\r\n\r\n        setChatMessages(updatedMessages);\r\n        updateChatMessages(chat.id, updatedMessages);\r\n        setChat(updatedChat);\r\n        updateLastMessage(updatedChat);\r\n      }\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div id=\"chat_window\">\r\n      {selectedContact && (\r\n        <>\r\n\r\n          <ProfilePic pic={selectedContact.profilePic}/>\r\n          <span className=\"username\">{selectedContact.displayName}</span>\r\n        </>\r\n      )}\r\n      <ChatButtons chat={chat} handleDeleteChat={handleDeleteChat}/>\r\n      <div id=\"messages\" ref={messagesContainerRef}>\r\n        {chatMessages.slice().reverse().map((message, index) => {\r\n          const incoming = message.sender.username === user.username ? 0 : 1;\r\n          return (\r\n            <Message\r\n              key={index}\r\n              text={message.content}\r\n              dateAndTime={message.created}\r\n              incoming={incoming}\r\n            />\r\n          );\r\n        })}\r\n      </div>\r\n      <SendMessage\r\n        onSendMessage={handleSendMessage}\r\n        selectedContact={selectedContact ? selectedContact.username : null}\r\n      />\r\n    </div>\r\n  );\r\n}\r\n\r\n\r\nexport default ChatBox;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}